
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package CUP;

import java_cup.runtime.Symbol;
import java.util.HashMap;
import java.util.Map;
import Clases.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\004" +
    "\000\002\004\003\000\002\004\004\000\002\070\004\000" +
    "\002\005\005\000\002\006\006\000\002\072\004\000\002" +
    "\072\005\000\002\007\003\000\002\007\005\000\002\010" +
    "\004\000\002\071\005\000\002\071\005\000\002\056\003" +
    "\000\002\057\003\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\011\003\000\002\011\004\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\005\000\002" +
    "\067\007\000\002\014\006\000\002\045\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\050\010\000\002\051\012\000" +
    "\002\021\011\000\002\021\006\000\002\016\006\000\002" +
    "\017\005\000\002\017\004\000\002\020\004\000\002\022" +
    "\006\000\002\022\005\000\002\046\004\000\002\023\003" +
    "\000\002\023\005\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\006\000\002" +
    "\025\004\000\002\062\006\000\002\026\004\000\002\061" +
    "\006\000\002\027\004\000\002\060\012\000\002\030\006" +
    "\000\002\065\006\000\002\063\003\000\002\064\003\000" +
    "\002\031\003\000\002\031\004\000\002\032\006\000\002" +
    "\032\006\000\002\032\005\000\002\032\005\000\002\033" +
    "\007\000\002\033\007\000\002\003\003\000\002\047\004" +
    "\000\002\041\003\000\002\041\005\000\002\042\003\000" +
    "\002\042\005\000\002\043\003\000\002\043\005\000\002" +
    "\044\003\000\002\044\004\000\002\044\004\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\005\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\036\003\000\002\036\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\020\003\015\004\005\005\020\006\006\007" +
    "\017\010\014\052\011\001\002\000\004\011\031\001\002" +
    "\000\004\051\uffed\001\002\000\004\051\uffeb\001\002\000" +
    "\020\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\052\ufffb\001\002\000\004\051\306\001\002\000\004\015" +
    "\026\001\002\000\016\002\ufffd\004\005\005\020\006\006" +
    "\007\017\010\014\001\002\000\004\002\024\001\002\000" +
    "\004\051\uffe9\001\002\000\004\020\023\001\002\000\020" +
    "\002\ufffe\004\005\005\020\006\006\007\017\010\014\052" +
    "\011\001\002\000\004\051\uffea\001\002\000\004\051\uffec" +
    "\001\002\000\020\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\052\ufffa\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\ufffc\001\002\000\004\002\001\001\002\000" +
    "\016\002\000\004\005\005\020\006\006\007\017\010\014" +
    "\001\002\000\004\016\027\001\002\000\004\011\031\001" +
    "\002\000\060\004\005\005\020\006\006\007\017\010\014" +
    "\015\036\027\037\030\051\041\052\042\057\044\076\045" +
    "\050\046\070\051\114\053\111\054\075\057\062\060\067" +
    "\061\113\062\103\063\110\064\035\065\040\001\002\000" +
    "\060\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\015\uffef" +
    "\027\uffef\030\uffef\041\uffef\042\uffef\044\uffef\045\uffef\046" +
    "\uffef\051\uffef\053\uffef\054\uffef\057\uffef\060\uffef\061\uffef" +
    "\062\uffef\063\uffef\064\uffef\065\uffef\001\002\000\016\002" +
    "\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\001\002" +
    "\000\044\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012" +
    "\uffe5\042\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\053\uffe5\054\uffe5\057\uffe5\060\uffe5\001\002\000" +
    "\044\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\012\uffc3" +
    "\042\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\053\uffc3\054\uffc3\057\uffc3\060\uffc3\001\002\000\060" +
    "\012\uffd5\014\uffd5\016\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\055\uffd5\056\uffd5\001\002\000\026\015\036" +
    "\027\037\030\051\041\052\051\121\061\113\062\103\063" +
    "\110\064\035\065\040\001\002\000\070\012\uff91\014\uff91" +
    "\015\uff91\016\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024" +
    "\uff91\025\uff91\026\uff91\031\uff91\032\uff91\033\uff91\034\uff91" +
    "\035\uff91\036\uff91\037\uff91\040\uff91\051\uff91\055\uff91\056" +
    "\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91\001\002" +
    "\000\060\012\uffd4\014\uffd4\016\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\055\uffd4\056\uffd4\001\002\000\044" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3\042" +
    "\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3" +
    "\053\uffe3\054\uffe3\057\uffe3\060\uffe3\001\002\000\004\011" +
    "\031\001\002\000\060\012\uffa1\014\uffa1\016\uffa1\020\uffa1" +
    "\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\055\uffa1\056\uffa1\001" +
    "\002\000\044\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\012\uffdf\042\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\053\uffdf\054\uffdf\057\uffdf\060\uffdf\001\002" +
    "\000\004\011\031\001\002\000\044\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\012\uffde\042\uffde\044\uffde\045\uffde" +
    "\046\uffde\047\uffde\050\uffde\051\uffde\053\uffde\054\uffde\057" +
    "\uffde\060\uffde\001\002\000\052\012\uffa2\020\243\021\uffa2" +
    "\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\056\uffa2\001\002\000\004\015" +
    "\266\001\002\000\070\012\uff90\014\uff90\015\uff90\016\uff90" +
    "\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026" +
    "\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90" +
    "\037\uff90\040\uff90\051\uff90\055\uff90\056\uff90\061\uff90\062" +
    "\uff90\063\uff90\064\uff90\065\uff90\001\002\000\070\012\uff8f" +
    "\014\uff8f\015\uff8f\016\uff8f\020\uff8f\021\uff8f\022\uff8f\023" +
    "\uff8f\024\uff8f\025\uff8f\026\uff8f\031\uff8f\032\uff8f\033\uff8f" +
    "\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\051\uff8f\055" +
    "\uff8f\056\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f" +
    "\001\002\000\020\015\036\051\121\061\113\062\103\063" +
    "\110\064\035\065\040\001\002\000\044\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\012\uffdd\042\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\053\uffdd\054\uffdd" +
    "\057\uffdd\060\uffdd\001\002\000\044\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\012\uffe1\042\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\051\uffe1\053\uffe1\054\uffe1\057" +
    "\uffe1\060\uffe1\001\002\000\052\012\uffa9\014\uffa9\016\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\055\uffa9\056\uffa9\001\002\000\004\015" +
    "\262\001\002\000\040\004\005\005\020\006\006\007\017" +
    "\010\014\012\157\042\057\044\076\045\050\046\070\051" +
    "\236\053\111\054\075\057\062\060\067\001\002\000\010" +
    "\012\uffc8\016\uffc8\056\uffc8\001\002\000\030\015\036\020" +
    "\257\027\037\030\051\041\052\051\121\061\113\062\103" +
    "\063\110\064\035\065\040\001\002\000\044\004\uffc6\005" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\012\uffc6\042\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\053\uffc6\054" +
    "\uffc6\057\uffc6\060\uffc6\001\002\000\044\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\012\uffe0\042\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\053\uffe0\054\uffe0" +
    "\057\uffe0\060\uffe0\001\002\000\044\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\012\uffe2\042\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\054\uffe2\057" +
    "\uffe2\060\uffe2\001\002\000\060\012\uffa3\014\uffa3\016\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\055\uffa3\056" +
    "\uffa3\001\002\000\004\020\255\001\002\000\004\015\252" +
    "\001\002\000\044\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\012\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\053\uffc5\054\uffc5\057\uffc5\060\uffc5\001" +
    "\002\000\044\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\012\uffe6\042\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\053\uffe6\054\uffe6\057\uffe6\060\uffe6\001\002" +
    "\000\004\011\222\001\002\000\060\012\uffa7\014\uffa7\016" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7" +
    "\026\uffa7\027\037\030\051\031\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\052\055\uffa7" +
    "\056\uffa7\001\002\000\004\015\214\001\002\000\004\015" +
    "\211\001\002\000\044\004\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\012\uffc4\042\uffc4\044\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\053\uffc4\054\uffc4\057\uffc4\060\uffc4" +
    "\001\002\000\036\012\uffad\014\uffad\016\uffad\020\uffad\031" +
    "\202\032\207\033\204\034\205\035\206\036\201\037\uffad" +
    "\040\uffad\055\uffad\056\uffad\001\002\000\044\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8\042\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\053\uffe8\054" +
    "\uffe8\057\uffe8\060\uffe8\001\002\000\022\012\uffaf\014\uffaf" +
    "\016\uffaf\020\uffaf\037\175\040\177\055\uffaf\056\uffaf\001" +
    "\002\000\060\012\uffd7\014\uffd7\016\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\055\uffd7\056\uffd7\001\002\000" +
    "\044\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4" +
    "\042\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051" +
    "\uffe4\053\uffe4\054\uffe4\057\uffe4\060\uffe4\001\002\000\004" +
    "\011\031\001\002\000\004\051\161\001\002\000\006\012" +
    "\157\056\133\001\002\000\060\012\uffd6\014\uffd6\016\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\055\uffd6\056" +
    "\uffd6\001\002\000\004\015\153\001\002\000\052\012\uffab" +
    "\014\uffab\016\uffab\020\uffab\021\144\022\146\023\151\024" +
    "\150\025\143\026\145\031\uffab\032\uffab\033\uffab\034\uffab" +
    "\035\uffab\036\uffab\037\uffab\040\uffab\055\uffab\056\uffab\001" +
    "\002\000\060\012\uffd8\014\uffd8\016\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\055\uffd8\056\uffd8\001\002\000" +
    "\060\012\uffa4\013\115\015\116\017\117\020\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\041\uffa4\056\uffa4\001\002\000\026\015" +
    "\036\027\037\030\051\041\052\051\121\061\113\062\103" +
    "\063\110\064\035\065\040\001\002\000\030\015\036\016" +
    "\131\027\037\030\051\041\052\051\121\061\113\062\103" +
    "\063\110\064\035\065\040\001\002\000\030\011\031\015" +
    "\036\027\037\030\051\041\052\051\121\061\113\062\103" +
    "\063\110\064\035\065\040\001\002\000\060\012\uffa2\014" +
    "\uffa2\016\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2" +
    "\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033" +
    "\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2" +
    "\055\uffa2\056\uffa2\001\002\000\064\012\uffa4\013\126\014" +
    "\uffa4\015\116\016\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\055\uffa4\056\uffa4\001\002\000\004\020\125\001" +
    "\002\000\004\020\124\001\002\000\044\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\010\uffda\012\uffda\042\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\050\uffda\051\uffda\053\uffda\054\uffda" +
    "\057\uffda\060\uffda\001\002\000\044\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\012\uffd0\042\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\053\uffd0\054\uffd0\057" +
    "\uffd0\060\uffd0\001\002\000\026\015\036\027\037\030\051" +
    "\041\052\051\121\061\113\062\103\063\110\064\035\065" +
    "\040\001\002\000\004\014\130\001\002\000\060\012\uffcf" +
    "\014\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\055\uffcf\056\uffcf\001\002\000\060\012\uffca\014\uffca" +
    "\016\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\055" +
    "\uffca\056\uffca\001\002\000\006\016\134\056\133\001\002" +
    "\000\026\015\036\027\037\030\051\041\052\051\121\061" +
    "\113\062\103\063\110\064\035\065\040\001\002\000\060" +
    "\012\uffcb\014\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\055\uffcb\056\uffcb\001\002\000\010\012\uffc7" +
    "\016\uffc7\056\uffc7\001\002\000\004\014\137\001\002\000" +
    "\054\012\uffcf\017\140\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\056\uffcf\001\002\000\026\015\036\027\037\030" +
    "\051\041\052\051\121\061\113\062\103\063\110\064\035" +
    "\065\040\001\002\000\004\020\142\001\002\000\044\004" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1\042\uffd1" +
    "\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\053" +
    "\uffd1\054\uffd1\057\uffd1\060\uffd1\001\002\000\026\015\uff9b" +
    "\027\uff9b\030\uff9b\041\uff9b\051\uff9b\061\uff9b\062\uff9b\063" +
    "\uff9b\064\uff9b\065\uff9b\001\002\000\026\015\uff9f\027\uff9f" +
    "\030\uff9f\041\uff9f\051\uff9f\061\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\001\002\000\026\015\uff9a\027\uff9a\030\uff9a" +
    "\041\uff9a\051\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065" +
    "\uff9a\001\002\000\026\015\uff9e\027\uff9e\030\uff9e\041\uff9e" +
    "\051\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\001" +
    "\002\000\026\015\036\027\037\030\051\041\052\051\121" +
    "\061\113\062\103\063\110\064\035\065\040\001\002\000" +
    "\026\015\uff9c\027\uff9c\030\uff9c\041\uff9c\051\uff9c\061\uff9c" +
    "\062\uff9c\063\uff9c\064\uff9c\065\uff9c\001\002\000\026\015" +
    "\uff9d\027\uff9d\030\uff9d\041\uff9d\051\uff9d\061\uff9d\062\uff9d" +
    "\063\uff9d\064\uff9d\065\uff9d\001\002\000\052\012\uffa8\014" +
    "\uffa8\016\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\036\uffa8\037\uffa8\040\uffa8\055\uffa8\056\uffa8\001\002" +
    "\000\026\015\036\027\037\030\051\041\052\051\121\061" +
    "\113\062\103\063\110\064\035\065\040\001\002\000\004" +
    "\016\155\001\002\000\004\020\156\001\002\000\044\004" +
    "\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\012\uffb1\042\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\053" +
    "\uffb1\054\uffb1\057\uffb1\060\uffb1\001\002\000\054\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\012\uffee\020" +
    "\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee" +
    "\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\057\uffee\060" +
    "\uffee\001\002\000\054\002\ufff0\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\012\ufff0\020\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0" +
    "\053\ufff0\054\ufff0\057\ufff0\060\ufff0\001\002\000\010\013" +
    "\163\017\164\020\162\001\002\000\044\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\012\uffdc\042\uffdc\044\uffdc\045" +
    "\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\053\uffdc\054\uffdc" +
    "\057\uffdc\060\uffdc\001\002\000\026\015\036\027\037\030" +
    "\051\041\052\051\121\061\113\062\103\063\110\064\035" +
    "\065\040\001\002\000\026\015\036\027\037\030\051\041" +
    "\052\051\121\061\113\062\103\063\110\064\035\065\040" +
    "\001\002\000\004\020\166\001\002\000\044\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\042\uffdb\044\uffdb" +
    "\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\054" +
    "\uffdb\057\uffdb\060\uffdb\001\002\000\004\014\170\001\002" +
    "\000\004\017\171\001\002\000\004\011\031\001\002\000" +
    "\004\020\173\001\002\000\044\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\012\uffd2\042\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\053\uffd2\054\uffd2\057\uffd2" +
    "\060\uffd2\001\002\000\044\004\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\012\uffbf\042\uffbf\044\uffbf\045\uffbf\046\uffbf" +
    "\047\uffbf\050\uffbf\051\uffbf\053\uffbf\054\uffbf\057\uffbf\060" +
    "\uffbf\001\002\000\026\015\uff93\027\uff93\030\uff93\041\uff93" +
    "\051\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93\001" +
    "\002\000\026\015\036\027\037\030\051\041\052\051\121" +
    "\061\113\062\103\063\110\064\035\065\040\001\002\000" +
    "\026\015\uff92\027\uff92\030\uff92\041\uff92\051\uff92\061\uff92" +
    "\062\uff92\063\uff92\064\uff92\065\uff92\001\002\000\036\012" +
    "\uffac\014\uffac\016\uffac\020\uffac\031\202\032\207\033\204" +
    "\034\205\035\206\036\201\037\uffac\040\uffac\055\uffac\056" +
    "\uffac\001\002\000\026\015\uff94\027\uff94\030\uff94\041\uff94" +
    "\051\uff94\061\uff94\062\uff94\063\uff94\064\uff94\065\uff94\001" +
    "\002\000\026\015\uff99\027\uff99\030\uff99\041\uff99\051\uff99" +
    "\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\001\002\000" +
    "\026\015\036\027\037\030\051\041\052\051\121\061\113" +
    "\062\103\063\110\064\035\065\040\001\002\000\026\015" +
    "\uff97\027\uff97\030\uff97\041\uff97\051\uff97\061\uff97\062\uff97" +
    "\063\uff97\064\uff97\065\uff97\001\002\000\026\015\uff96\027" +
    "\uff96\030\uff96\041\uff96\051\uff96\061\uff96\062\uff96\063\uff96" +
    "\064\uff96\065\uff96\001\002\000\026\015\uff95\027\uff95\030" +
    "\uff95\041\uff95\051\uff95\061\uff95\062\uff95\063\uff95\064\uff95" +
    "\065\uff95\001\002\000\026\015\uff98\027\uff98\030\uff98\041" +
    "\uff98\051\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98" +
    "\001\002\000\052\012\uffaa\014\uffaa\016\uffaa\020\uffaa\021" +
    "\144\022\146\023\151\024\150\025\143\026\145\031\uffaa" +
    "\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\055\uffaa\056\uffaa\001\002\000\026\015\036\027\037" +
    "\030\051\041\052\051\121\061\113\062\103\063\110\064" +
    "\035\065\040\001\002\000\004\016\213\001\002\000\004" +
    "\011\uffbe\001\002\000\004\051\215\001\002\000\004\016" +
    "\216\001\002\000\004\020\217\001\002\000\044\004\uffb0" +
    "\005\uffb0\006\uffb0\007\uffb0\010\uffb0\012\uffb0\042\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\053\uffb0" +
    "\054\uffb0\057\uffb0\060\uffb0\001\002\000\052\012\uffa6\014" +
    "\uffa6\016\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6" +
    "\025\uffa6\026\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\036\uffa6\037\uffa6\040\uffa6\055\uffa6\056\uffa6\001\002" +
    "\000\006\047\226\050\223\001\002\000\006\047\uffb9\050" +
    "\uffb9\001\002\000\004\055\247\001\002\000\010\012\244" +
    "\047\226\050\223\001\002\000\010\012\uffb7\047\uffb7\050" +
    "\uffb7\001\002\000\026\015\036\027\037\030\051\041\052" +
    "\051\121\061\113\062\103\063\110\064\035\065\040\001" +
    "\002\000\004\055\230\001\002\000\060\004\005\005\020" +
    "\006\006\007\017\010\014\015\036\027\037\030\051\041" +
    "\052\042\057\044\076\045\050\046\070\051\114\053\111" +
    "\054\075\057\062\060\067\061\113\062\103\063\110\064" +
    "\035\065\040\001\002\000\010\012\uffb4\047\uffb4\050\uffb4" +
    "\001\002\000\044\004\005\005\020\006\006\007\017\010" +
    "\014\012\uffb5\042\057\044\076\045\050\046\070\047\uffb5" +
    "\050\uffb5\051\236\053\111\054\075\057\062\060\067\001" +
    "\002\000\004\020\234\001\002\000\010\012\uffae\047\uffae" +
    "\050\uffae\001\002\000\004\020\243\001\002\000\010\013" +
    "\240\015\116\017\117\001\002\000\044\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\012\uffe7\042\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\053\uffe7\054\uffe7" +
    "\057\uffe7\060\uffe7\001\002\000\026\015\036\027\037\030" +
    "\051\041\052\051\121\061\113\062\103\063\110\064\035" +
    "\065\040\001\002\000\004\014\242\001\002\000\004\017" +
    "\140\001\002\000\044\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\012\uffc9\042\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\053\uffc9\054\uffc9\057\uffc9\060\uffc9" +
    "\001\002\000\044\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\012\uffb8\042\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\050\uffb8\051\uffb8\053\uffb8\054\uffb8\057\uffb8\060\uffb8\001" +
    "\002\000\044\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb" +
    "\012\uffbb\042\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\053\uffbb\054\uffbb\057\uffbb\060\uffbb\001\002" +
    "\000\010\012\uffb6\047\uffb6\050\uffb6\001\002\000\060\004" +
    "\005\005\020\006\006\007\017\010\014\015\036\027\037" +
    "\030\051\041\052\042\057\044\076\045\050\046\070\051" +
    "\114\053\111\054\075\057\062\060\067\061\113\062\103" +
    "\063\110\064\035\065\040\001\002\000\010\012\uffb3\047" +
    "\uffb3\050\uffb3\001\002\000\044\004\005\005\020\006\006" +
    "\007\017\010\014\012\uffb2\042\057\044\076\045\050\046" +
    "\070\047\uffb2\050\uffb2\051\236\053\111\054\075\057\062" +
    "\060\067\001\002\000\026\015\036\027\037\030\051\041" +
    "\052\051\121\061\113\062\103\063\110\064\035\065\040" +
    "\001\002\000\004\016\254\001\002\000\004\011\uffba\001" +
    "\002\000\044\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc" +
    "\012\uffcc\042\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\053\uffcc\054\uffcc\057\uffcc\060\uffcc\001\002" +
    "\000\004\020\260\001\002\000\044\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\012\uffcd\042\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\051\uffcd\053\uffcd\054\uffcd\057" +
    "\uffcd\060\uffcd\001\002\000\044\004\uffce\005\uffce\006\uffce" +
    "\007\uffce\010\uffce\012\uffce\042\uffce\044\uffce\045\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\uffce\053\uffce\054\uffce\057\uffce" +
    "\060\uffce\001\002\000\054\002\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\012\ufff1\020\ufff1\042\ufff1\043\ufff1" +
    "\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\054\ufff1\057\ufff1\060\ufff1\001\002\000\026" +
    "\015\036\027\037\030\051\041\052\051\121\061\113\062" +
    "\103\063\110\064\035\065\040\001\002\000\004\016\264" +
    "\001\002\000\004\011\uffc0\001\002\000\052\012\uffa5\014" +
    "\uffa5\016\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\055\uffa5\056\uffa5\001\002" +
    "\000\004\051\270\001\002\000\004\056\273\001\002\000" +
    "\004\017\271\001\002\000\026\015\036\027\037\030\051" +
    "\041\052\051\121\061\113\062\103\063\110\064\035\065" +
    "\040\001\002\000\004\056\uffd9\001\002\000\026\015\036" +
    "\027\037\030\051\041\052\051\121\061\113\062\103\063" +
    "\110\064\035\065\040\001\002\000\004\056\275\001\002" +
    "\000\026\015\036\027\037\030\051\041\052\051\121\061" +
    "\113\062\103\063\110\064\035\065\040\001\002\000\004" +
    "\016\277\001\002\000\004\011\uffbc\001\002\000\046\004" +
    "\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\012\uffc1\042\uffc1" +
    "\043\301\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\053\uffc1\054\uffc1\057\uffc1\060\uffc1\001\002\000\004" +
    "\011\031\001\002\000\044\004\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\012\uffc2\042\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\053\uffc2\054\uffc2\057\uffc2\060" +
    "\uffc2\001\002\000\044\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\012\uffbd\042\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\053\uffbd\054\uffbd\057\uffbd\060\uffbd" +
    "\001\002\000\004\016\305\001\002\000\060\012\uffa0\014" +
    "\uffa0\016\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\055\uffa0\056\uffa0\001\002\000\004\015\310\001\002\000" +
    "\004\011\ufff8\001\002\000\016\004\005\005\020\006\006" +
    "\007\017\010\014\016\314\001\002\000\004\051\320\001" +
    "\002\000\006\016\ufff4\056\ufff4\001\002\000\006\016\316" +
    "\056\315\001\002\000\004\011\ufff6\001\002\000\014\004" +
    "\005\005\020\006\006\007\017\010\014\001\002\000\004" +
    "\011\ufff5\001\002\000\006\016\ufff3\056\ufff3\001\002\000" +
    "\006\016\ufff2\056\ufff2\001\002\000\020\002\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\052\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\016\002\012\004\015\005\003\006\011\066" +
    "\007\070\006\001\001\000\006\056\027\071\320\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\024\005\003" +
    "\066\007\070\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\003\006\021\066\007" +
    "\070\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\003\066\007\070\020\001\001\000" +
    "\002\001\001\000\006\056\027\071\031\001\001\000\102" +
    "\003\060\011\057\012\100\013\071\014\103\015\065\016" +
    "\042\017\043\020\045\021\063\022\046\023\106\024\040" +
    "\025\062\026\070\027\076\030\033\033\064\037\052\040" +
    "\073\041\101\042\077\043\111\044\055\046\053\051\054" +
    "\060\041\061\104\062\044\065\072\066\105\067\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\303\015" +
    "\065\016\042\022\117\037\052\040\073\041\101\042\077" +
    "\043\111\044\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\056\027\071\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\056\027\071" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\065\016\042\022\117\040\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\012\236\013\071\014\103\017\043\020\045\021\063" +
    "\022\234\024\040\025\062\026\070\027\076\030\033\033" +
    "\064\046\053\051\054\057\260\060\041\061\104\062\044" +
    "\065\072\066\105\067\032\001\001\000\002\001\001\000" +
    "\026\003\255\015\065\016\042\022\117\037\052\040\073" +
    "\041\101\042\077\043\111\044\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\220\001\001\000\004\037\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\202\001\001\000\002\001\001\000\004" +
    "\036\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\056\027\071\173\001\001\000\002\001\001\000\004" +
    "\057\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\135\015\065\016\042\022\117\037\052\040" +
    "\073\041\101\042\077\043\111\044\055\001\001\000\030" +
    "\003\060\015\065\016\042\022\117\023\131\037\052\040" +
    "\073\041\101\042\077\043\111\044\055\001\001\000\032" +
    "\003\122\015\065\016\042\022\117\037\052\040\073\041" +
    "\101\042\077\043\111\044\055\056\027\071\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\126\015\065\016\042\022\117\037\052\040\073\041" +
    "\101\042\077\043\111\044\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\134\015\065\016\042\022\117\037\052\040\073" +
    "\041\101\042\077\043\111\044\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\140\015\065\016\042\022\117\037\052\040" +
    "\073\041\101\042\077\043\111\044\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\015\065" +
    "\016\042\022\117\037\052\040\073\044\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\153\015\065\016\042\022\117\037\052\040\073\041" +
    "\101\042\077\043\111\044\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\166\015\065\016\042\022\117\037\052\040\073\041" +
    "\101\042\077\043\111\044\055\001\001\000\026\003\164" +
    "\015\065\016\042\022\117\037\052\040\073\041\101\042" +
    "\077\043\111\044\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\056" +
    "\027\071\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\065\016" +
    "\042\022\117\037\052\040\073\042\177\043\111\044\055" +
    "\001\001\000\002\001\001\000\004\035\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\065\016\042" +
    "\022\117\037\052\040\073\043\207\044\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\146\001\001\000\026\003\211\015" +
    "\065\016\042\022\117\037\052\040\073\041\101\042\077" +
    "\043\111\044\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\223\032" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\245\064\244\001\001\000\002\001\001\000\026\003" +
    "\226\015\065\016\042\022\117\037\052\040\073\041\101" +
    "\042\077\043\111\044\055\001\001\000\002\001\001\000" +
    "\102\003\232\011\231\012\100\013\071\014\103\015\065" +
    "\016\042\017\043\020\045\021\063\022\046\024\040\025" +
    "\062\026\070\027\076\030\033\033\064\037\052\040\073" +
    "\041\101\042\077\043\111\044\055\046\053\047\230\051" +
    "\054\060\041\061\104\062\044\065\072\066\105\067\032" +
    "\001\001\000\002\001\001\000\054\012\236\013\071\014" +
    "\103\017\043\020\045\021\063\022\234\024\040\025\062" +
    "\026\070\027\076\030\033\033\064\046\053\051\054\060" +
    "\041\061\104\062\044\065\072\066\105\067\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\240\015\065" +
    "\016\042\022\117\037\052\040\073\041\101\042\077\043" +
    "\111\044\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\102\003\232\011\250\012\100\013\071" +
    "\014\103\015\065\016\042\017\043\020\045\021\063\022" +
    "\046\024\040\025\062\026\070\027\076\030\033\033\064" +
    "\037\052\040\073\041\101\042\077\043\111\044\055\046" +
    "\053\047\247\051\054\060\041\061\104\062\044\065\072" +
    "\066\105\067\032\001\001\000\002\001\001\000\054\012" +
    "\236\013\071\014\103\017\043\020\045\021\063\022\234" +
    "\024\040\025\062\026\070\027\076\030\033\033\064\046" +
    "\053\051\054\060\041\061\104\062\044\065\072\066\105" +
    "\067\032\001\001\000\026\003\252\015\065\016\042\022" +
    "\117\037\052\040\073\041\101\042\077\043\111\044\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\262\015\065\016\042\022" +
    "\117\037\052\040\073\041\101\042\077\043\111\044\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\271\015\065\016\042\022\117\037" +
    "\052\040\073\041\101\042\077\043\111\044\055\001\001" +
    "\000\002\001\001\000\026\003\273\015\065\016\042\022" +
    "\117\037\052\040\073\041\101\042\077\043\111\044\055" +
    "\001\001\000\002\001\001\000\026\003\275\015\065\016" +
    "\042\022\117\037\052\040\073\041\101\042\077\043\111" +
    "\044\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\056\027\071\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\072\306\001\001\000\002\001\001\000\010" +
    "\007\312\010\311\066\310\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\316\066\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private static int cont = 1;

    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public Semantico analisisSemantico = new Semantico(tablaSimbolos);

    /**
    * Obtiene el tipo de las expresiones en el código.
    *
    * @param expression La expression en la gramática.
    */
    public TipoDatos obtenerTipoExpresion(Symbol expression) {
        if (expression == null) {
             System.err.println("Error semántico: No se puede determinar el tipo de la expresión.");
        }

        Object valor = expression.value;

        if (valor instanceof String) {
            if (((String) valor).equals("INTEGER") || valor.equals("STRING") || valor.equals("BOOL") || valor.equals("FLOAT") || valor.equals("CHAR") || valor.equals("VOID") || valor.equals("UNDEFINED")) {
                return TipoDatos.valueOf((String) valor);
            }
        }

        if (valor instanceof Integer) {
            return TipoDatos.INTEGER;
        } else if (valor instanceof Float) {
            return TipoDatos.FLOAT;
        } else if (valor instanceof Boolean) {
            return TipoDatos.BOOL;
        } else if (valor instanceof String) {
            return TipoDatos.STRING;
        } else if (valor instanceof Character) {
            return TipoDatos.CHAR;
        } else {
            System.err.println("Error semántico: Tipo de dato no reconocido en la expresión.");
        }
        return null;

    }

    /**
    * Verifica las asignaciones en el código.
    *
    * @param nombre El nombre de la funcion.
    * @param valor Los parametros enviados en la llamada.
    */
    public void verificarAsignacion(String nombre, Symbol valor) {

            String ambitoActual = tablaSimbolos.obtenerAmbitoActual();

            Simbolo simboloVariable = tablaSimbolos.obtenerSimbolo(nombre);

            if (simboloVariable ==  null) {
                System.err.println("Error semántico: La variable '" + nombre + "' no está declarada.");
                return;
            }

            if (!simboloVariable.getAmbito().equals(ambitoActual)){
                System.err.println("Error semántico: No se puede asignar un valor a la variable '" + nombre + "' desde un ámbito diferente.");
                return;
            }

            if (valor.value instanceof List) {
                verificarAsignacionArregloCompleto(nombre, valor);
                return;
            }

            TipoDatos tipoVariable = tablaSimbolos.obtenerTipo(nombre);
            TipoDatos tipoValor = obtenerTipoExpresion(valor);

            if (!analisisSemantico.esTipoCompatible(tipoVariable, tipoValor)) {
                 System.err.println("Error semántico: Tipo incompatible en la asignación a la variable '" + nombre + "'.");
            }
    }

    /**
     * Verifica la llamada a una función en el código.
     *
     * @param nombreFuncion El nombre de la funcion.
     * @param parametrosFuncion Los parametros enviados en la llamada.
     * @param argumentosFuncion Los argumentos de la funcion a llamar.
     */
    public void verificarLlamadaFuncion(String nombreFuncion, List<String> parametrosFuncion, List<TipoDatos> argumentosFuncion) {
        // Verificar que el número de parámetros y argumentos coincida
        if (argumentosFuncion.size() != parametrosFuncion.size()) {
            System.err.println("Error semántico: La función '" + nombreFuncion + "' debe recibir " + parametrosFuncion.size() +
                    " argumentos, pero se le están enviando " + argumentosFuncion.size() + ".");
            return;
        }

        // Convertir los parámetros a tipos de datos
        List<TipoDatos> tiposParametros = new ArrayList<>();
        for (String parametro : parametrosFuncion) {
            TipoDatos tipoParametro = obtenerTipoExpresion(new Symbol(-1, parametro));
            if (tipoParametro == null) {
                System.err.println("Error semántico: No se pudo determinar el tipo del parámetro '" + parametro + "'.");
                return;
            }
            tiposParametros.add(tipoParametro);
        }

        // Verificar la compatibilidad de tipos entre parámetros y argumentos
        for (int i = 0; i < argumentosFuncion.size(); i++) {
            TipoDatos tipoParametro = tiposParametros.get(i);
            TipoDatos tipoArgumento = argumentosFuncion.get(i);

            if (!tipoParametro.equals(tipoArgumento)) {
                System.err.println("Error semántico: La función '" + nombreFuncion + "' espera un parámetro de tipo " +
                        tipoParametro + " en la posición " + (i + 1) + ", pero se proporcionó un argumento de tipo " +
                        tipoArgumento + ".");
                return;
            }
        }
    }

    /**
     * Verifica la asignación a un elemento específico del arreglo.
     *
     * @param nombreArreglo El símbolo del arreglo.
     * @param indice         El índice del arreglo.
     * @param valor          El valor a asignar.
     * @throws RuntimeException Si la asignación no es válida.
     */
    private void verificarAsignacionElementoArreglo(String nombreArreglo, Symbol indice, Symbol valor) {
        // Obtener el símbolo del arreglo
        Simbolo simboloArreglo = tablaSimbolos.searchByName(nombreArreglo);

        if (simboloArreglo == null) {
            System.err.println("Error semántico: El arreglo '" + nombreArreglo + "' no está declarado.");
            return;
        }

        // Obtener el ámbito actual
        String ambitoActual = tablaSimbolos.obtenerAmbitoActual();

        // Verificar que la asignación ocurra dentro del mismo ámbito
        if (!simboloArreglo.getAmbito().equals(ambitoActual)) {
            System.err.println("Error semántico: No se puede modificar el arreglo '" + nombreArreglo + "' desde un ámbito diferente.");
            return;
        }

        // Verificar que el índice sea un entero
        if (!(indice.value instanceof Integer)) {
            System.err.println("Error semántico: El índice del arreglo debe ser un entero.");
            return;
        }
        int idx = (Integer) indice.value;

        // Verificar que el índice esté dentro de los límites del arreglo
        if (idx < 0 || idx >= simboloArreglo.getArraySize()) {
            System.err.println("Error semántico: Índice fuera de los límites para el arreglo '" + nombreArreglo + "'.");
            return;
        }

        // Obtener el tipo del valor a asignar
        TipoDatos tipoValor = obtenerTipoExpresion(valor);

        // Verificar compatibilidad de tipos
        if (!analisisSemantico.esTipoCompatible(tablaSimbolos.obtenerTipo(nombreArreglo), tipoValor)) {
            System.err.println("Error semántico: Tipo incompatible en la asignación al arreglo '" + nombreArreglo + "'.");
        }
    }

    /**
     * Verifica la asignación de un arreglo completo.
     *
     * @param nombreArreglo El símbolo del arreglo destino.
     * @param valor          El valor a asignar (debe ser una lista de valores).
     * @throws RuntimeException Si la asignación no es válida.
     */
    private void verificarAsignacionArregloCompleto(String nombreArreglo, Symbol valor) {

        // Verificar que el valor sea una lista de valores
        if (!(valor.value instanceof List)) {
            //throw new RuntimeException("Error semántico: Se esperaba una lista de valores para la asignación del arreglo.");
            System.err.println("Error semántico: Se esperaba una lista de valores para la asignación del arreglo.");
        }
        List<Object> valores = (List<Object>) valor.value;

        // Verificar que el tamaño de la lista coincida con el tamaño del arreglo
        if (valores.size() != tablaSimbolos.searchByName(nombreArreglo).getArraySize()) {
            //throw new RuntimeException("Error semántico: El tamaño de la lista no coincide con el tamaño del arreglo '" + nombreArreglo + "'.");
            System.err.println("Error semántico: Tipo incompatible en la asignación al arreglo '" + nombreArreglo + "'.");
        }

        // Verificar que todos los valores de la lista sean compatibles con el tipo del arreglo
        TipoDatos tipoArreglo = tablaSimbolos.obtenerTipo(nombreArreglo);

        for (Object valorElemento : valores) {
            TipoDatos tipoElemento = obtenerTipoExpresion(new Symbol(-1, valorElemento));

            if (!analisisSemantico.esTipoCompatible(tipoArreglo, tipoElemento)) {
                //throw new RuntimeException("Error semántico: Tipo incompatible en la asignación al arreglo '" + nombreArreglo + "'.");
                System.err.println("Error semántico: Tipo incompatible en la asignación al arreglo '" + nombreArreglo + "'.");
            }
        }
    }

    //Reporte de errores sintacticos
    @Override
    public void syntax_error(Symbol s) {
        System.err.println("Error sintáctico en línea " + (s.left) + ", columna " + (s.right));
        System.err.println("Error después del token: " + sym.terminalNames[s.sym - 1]);
    }

    @Override
    public void report_error(String message, Object info) {
        Symbol sym = (Symbol) info;
        System.err.println("Error: " + message + " en línea " + (sym.left) + ", columna " + (sym.right));
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws Exception {
        System.err.println("Error sintáctico crítico.");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= main funciones 
            {
              Object RESULT =null;
		
    tablaSimbolos.asignarAmbito();
    analisisSemantico.iniciarAnalisisSemantico();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= funciones main 
            {
              Object RESULT =null;
		
    tablaSimbolos.asignarAmbito();
    analisisSemantico.iniciarAnalisisSemantico();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= funciones 
            {
              Object RESULT =null;
		
    tablaSimbolos.asignarAmbito();
    analisisSemantico.iniciarAnalisisSemantico();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= main 
            {
              Object RESULT =null;
		
    tablaSimbolos.asignarAmbito();
    analisisSemantico.iniciarAnalisisSemantico();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= error END_STATEMENT 
            {
              Object RESULT =null;
		
                System.err.println("Recuperación: Se ignoró el error hasta ';'");
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= encabezadoFunc bloque 
            {
              Object RESULT =null;
		int encabezadoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int encabezadoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object encabezado = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Funciones.EncabezadoFuncion encabezadoFuncion = (Funciones.EncabezadoFuncion) encabezado;
    tablaSimbolos.addToSymbolTable(encabezadoFuncion.tipo.toString(), "FUNCTION", encabezadoFuncion.nombre.toString(), null, -1);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // encabezadoFunc ::= tipos IDENTIFIER parametros 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDatos tipo = (TipoDatos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new Funciones.EncabezadoFuncion(tipo, nombre.toString(), params);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("encabezadoFunc",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main ::= MAIN OPEN_PAREN CLOSE_PAREN bloque 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("UNDEFINED", "FUNCTION", "_verano_", null, -1);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= OPEN_PAREN CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= OPEN_PAREN paramAux CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramAux ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramAux",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramAux ::= paramAux COMMA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramAux",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro ::= tipos IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDatos t = (TipoDatos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    tablaSimbolos.addToSymbolTable(t.toString(), "PARAMETER", (String) nombre, null, -1);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bloque ::= openblock sentencias closeblock 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque ::= openblock argumentos closeblock 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // openblock ::= OPEN_BLOCK 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    tablaSimbolos.abrirScope(new Symbol(-1, o));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("openblock",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // closeblock ::= CLOSE_BLOCK 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    tablaSimbolos.cerrarScope(new Symbol(-1, c));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closeblock",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipos ::= INTEGER 
            {
              TipoDatos RESULT =null;
		 RESULT = TipoDatos.valueOf("INTEGER") ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipos ::= FLOAT 
            {
              TipoDatos RESULT =null;
		 RESULT = TipoDatos.valueOf("FLOAT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipos ::= BOOL 
            {
              TipoDatos RESULT =null;
		 RESULT = TipoDatos.valueOf("BOOL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipos ::= CHAR 
            {
              TipoDatos RESULT =null;
		 RESULT = TipoDatos.valueOf("CHAR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipos ::= STRING 
            {
              TipoDatos RESULT =null;
		 RESULT = TipoDatos.valueOf("STRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= creacionAsign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= estructuraControl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= io 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= creacionAsignArreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= asignacionArreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= returnStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= breakStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= llamadaFuncionCompleta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // creacion ::= tipos IDENTIFIER END_STATEMENT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDatos tipo = (TipoDatos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    tablaSimbolos.addToSymbolTable(tipo.toString(), "VARIABLE", (String) nombre, null, -1);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // creacionAsign ::= tipos IDENTIFIER ASSIGN expression END_STATEMENT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TipoDatos tipo = (TipoDatos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    tablaSimbolos.addToSymbolTable(tipo.toString(), "VARIABLE", (String) nombre, (Symbol) valor, -1);
    verificarAsignacion(nombre.toString(), (Symbol) valor);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacionAsign",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion ::= IDENTIFIER ASSIGN expression END_STATEMENT 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    verificarAsignacion(nombre.toString(), (Symbol) valor);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacionFor ::= IDENTIFIER ASSIGN expression 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    tablaSimbolos.addToSymbolTable("INTEGER", "VARIABLE", (String) nombre, (Symbol) valor, -1);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionFor",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // literales ::= INT_LITERAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Symbol symbol = (Symbol) stack.peek();
    RESULT = symbol;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // literales ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Symbol symbol = (Symbol) stack.peek();
    RESULT = symbol;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // literales ::= BOOL_LITERAL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Symbol symbol = (Symbol) stack.peek();
    RESULT = symbol;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // literales ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Symbol symbol = (Symbol) stack.peek();
    RESULT = symbol;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // literales ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Symbol symbol = (Symbol) stack.peek();
    RESULT = symbol;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // creacionArreglo ::= tipos IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET END_STATEMENT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TipoDatos tipo = (TipoDatos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    int arraySize = (Integer) ((Symbol) size).value;
    tablaSimbolos.addToSymbolTable(tipo.toString(), "ARRAY", (String) nombre, null, arraySize);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacionArreglo",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // creacionAsignArreglo ::= tipos IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN bloque END_STATEMENT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TipoDatos tipo = (TipoDatos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valores = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    int arraySize = (Integer) ((Symbol) size).value;
    tablaSimbolos.addToSymbolTable(tipo.toString(), "ARRAY", (String) nombre, (Symbol) valores, arraySize);
    verificarAsignacionArregloCompleto((String) nombre, (Symbol) valores);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacionAsignArreglo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // asignacionArreglo ::= IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN expression END_STATEMENT 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    verificarAsignacionElementoArreglo((String) nombre, (Symbol) e1, (Symbol) e2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionArreglo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // asignacionArreglo ::= IDENTIFIER ASSIGN bloque END_STATEMENT 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    verificarAsignacionArregloCompleto((String) nombre, (Symbol) b);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionArreglo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // accesoArreglo ::= IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = tablaSimbolos.obtenerValorArreglo((String) nombre, (Symbol) e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accesoArreglo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // returnStatement ::= RETURN expression END_STATEMENT 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    tablaSimbolos.addToSymbolTable(obtenerTipoExpresion((Symbol) valor).toString(), "RETURN", "return" + cont, (Symbol )valor, -1);
    cont ++;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // returnStatement ::= RETURN END_STATEMENT 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("VOID", "RETURN", "return" + cont, null, -1);
    cont ++;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // breakStatement ::= BREAK END_STATEMENT 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("VOID", "BREAK", "break" + cont, null, -1);
    cont ++;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("breakStatement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // llamadaFuncion ::= IDENTIFIER OPEN_PAREN argumentos CLOSE_PAREN 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    List<String> tipoParametrosFuncion = tablaSimbolos.obtenerTipoParametrosFuncion(new Symbol(-1, nombre)).reversed();
    List<Symbol> listaArgumentos = (List<Symbol>) ((Symbol) a).value;
    List<TipoDatos> nuevaListaArgumentos = new ArrayList();

    for (Object argumento: listaArgumentos) {
        nuevaListaArgumentos.add(obtenerTipoExpresion(new Symbol(-1, argumento)));
    }
    verificarLlamadaFuncion((String) nombre, tipoParametrosFuncion, nuevaListaArgumentos);
    RESULT = tablaSimbolos.obtenerTipoRetornoFuncion(new Symbol (-1, nombre));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // llamadaFuncion ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    RESULT = tablaSimbolos.obtenerTipoRetornoFuncion(new Symbol (-1, nombre));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // llamadaFuncionCompleta ::= llamadaFuncion END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncionCompleta",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // argumentos ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    List<Object> argumentosList = new ArrayList<>();
    argumentosList.add(((Symbol) e).value);
    RESULT = new Symbol(-1, argumentosList);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // argumentos ::= argumentos COMMA expression 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    List<Object> argumentosList = (List<Object>) ((Symbol) args).value;
    argumentosList.add(((Symbol) e).value);
    RESULT = new Symbol(-1, argumentosList);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // estructuraControl ::= ifElse 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // estructuraControl ::= while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // estructuraControl ::= for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // estructuraControl ::= switch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ifElse ::= encabezadoIfElse bloque ELSE bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifElse",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ifElse ::= encabezadoIfElse bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifElse",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // encabezadoIfElse ::= IF OPEN_PAREN expression CLOSE_PAREN 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("UNDEFINED", "IF", "if" + cont, null, -1);
    cont ++;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("encabezadoIfElse",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // while ::= encabezadoWhile bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // encabezadoWhile ::= WHILE OPEN_PAREN expression CLOSE_PAREN 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("UNDEFINED", "CYCLE", "while" + cont, null, -1);
    cont ++;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("encabezadoWhile",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // for ::= encabezadoFor bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // encabezadoFor ::= FOR OPEN_PAREN asignacionFor COMMA expression COMMA expression CLOSE_PAREN 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("UNDEFINED", "CYCLE", "for" + cont, null, -1);
    cont ++;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("encabezadoFor",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // switch ::= encabezadoSwitch openSwitch casos closeSwitch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // encabezadoSwitch ::= SWITCH OPEN_PAREN expression CLOSE_PAREN 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("UNDEFINED", "SWITCH", "switch" + cont, null, -1);
    cont ++;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("encabezadoSwitch",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // openSwitch ::= OPEN_BLOCK 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    tablaSimbolos.abrirScope(new Symbol(-1, o));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("openSwitch",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // closeSwitch ::= CLOSE_BLOCK 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    tablaSimbolos.cerrarScope(new Symbol(-1, c));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("closeSwitch",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // casos ::= caso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // casos ::= casos caso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // caso ::= CASE expression COLON sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // caso ::= CASE expression COLON expressionCompleta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // caso ::= DEFAULT COLON expressionCompleta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // caso ::= DEFAULT COLON sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // io ::= PRINT OPEN_PAREN expression CLOSE_PAREN END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // io ::= READ OPEN_PAREN IDENTIFIER CLOSE_PAREN END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expressionLogica 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = el;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expressionCompleta ::= expression END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionCompleta",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expressionLogica ::= expressionRelacional 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = er;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionLogica",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expressionLogica ::= expressionLogica operadorLogico expressionRelacional 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ol = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = FuncionesOperadores.combinarExpresionesLogicas((Symbol) el,(Symbol) ol,(Symbol) er); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionLogica",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expressionRelacional ::= expressionAritmetica 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ea;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionRelacional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expressionRelacional ::= expressionRelacional operadorRelacional expressionAritmetica 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = FuncionesOperadores.combinarExpresionesRelacionales((Symbol) er,(Symbol) or,(Symbol) ea); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionRelacional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expressionAritmetica ::= expressionUnaria 
            {
              Object RESULT =null;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = eu;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionAritmetica",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expressionAritmetica ::= expressionAritmetica operadorAritmetico expressionUnaria 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object oe = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = FuncionesOperadores.combinarExpresionesAritmeticas((Symbol) ea1,(Symbol) oe,(Symbol) ea2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionAritmetica",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expressionUnaria ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionUnaria",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expressionUnaria ::= termino operadorUnario 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ouleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ouright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ou = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = FuncionesOperadores.combinarExpresionUnaria( (Symbol) t, (Symbol) ou, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionUnaria",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expressionUnaria ::= operadorUnario termino 
            {
              Object RESULT =null;
		int ouleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ouright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ou = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = FuncionesOperadores.combinarExpresionUnaria( (Symbol) t, (Symbol) ou, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionUnaria",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // termino ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tablaSimbolos.obtenerValor(new Symbol (-1, i));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // termino ::= literales 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // termino ::= llamadaFuncion 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lf; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // termino ::= accesoArreglo 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = aa; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // termino ::= OPEN_PAREN expression CLOSE_PAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operadorAritmetico ::= PLUS 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "OPERADOR", "+", null, -1);
    RESULT = new Symbol(-1, "+");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operadorAritmetico ::= MINUS 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "OPERADOR", "-", null, -1);
    RESULT = new Symbol(-1, "-");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operadorAritmetico ::= MULTIPLY 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "OPERADOR", "*", null, -1);
    RESULT = new Symbol(-1, "*");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operadorAritmetico ::= DIVIDE 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "OPERADOR", "/", null, -1);
    RESULT = new Symbol(-1, "/");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operadorAritmetico ::= MODULO 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "OPERADOR", "%", null, -1);
    RESULT = new Symbol(-1, "%");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operadorAritmetico ::= POWER 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "OPERADOR", "**", null, -1);
    RESULT = new Symbol(-1, "**");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadorRelacional ::= LESS_THAN 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorRelacional", "OPERADOR", "<", null, -1);
    RESULT = new Symbol(-1, "<");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operadorRelacional ::= LESS_EQUAL 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorRelacional", "OPERADOR", "<=", null, -1);
    RESULT = new Symbol(-1, "<=");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operadorRelacional ::= GREATER_THAN 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorRelacional", "OPERADOR", ">", null, -1);
    RESULT = new Symbol(-1, ">");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operadorRelacional ::= GREATER_EQUAL 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorRelacional", "OPERADOR",">=", null, -1);
    RESULT = new Symbol(-1, ">=");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operadorRelacional ::= EQUAL 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorRelacional", "OPERADOR", "==", null, -1);
    RESULT = new Symbol(-1, "==");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operadorRelacional ::= NOT_EQUAL 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorRelacional", "OPERADOR", "!=", null, -1);
    RESULT = new Symbol(-1, "!=");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operadorLogico ::= AND 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorLogico", "OPERADOR", "&&", null, -1);
    RESULT = new Symbol(-1, "&&");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operadorLogico ::= OR 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorLogico", "OPERADOR", "||", null, -1);
    RESULT = new Symbol(-1, "||");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operadorUnario ::= INCREMENT 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorUnario", "OPERADOR", "++", null, -1);
    RESULT = new Symbol(-1, "++");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operadorUnario ::= DECREMENT 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorUnario","OPERADOR", "--", null, -1);
    RESULT = new Symbol(-1, "--");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operadorUnario ::= NOT 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorLogico", "OPERADOR", "!", null, -1);
    RESULT = new Symbol(-1,"!");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package CUP;

import java_cup.runtime.Symbol;
import java.util.HashMap;
import java.util.Map;
import Clases.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\004" +
    "\000\002\004\003\000\002\004\004\000\002\051\004\000" +
    "\002\005\005\000\002\006\006\000\002\052\004\000\002" +
    "\052\005\000\002\007\003\000\002\007\005\000\002\010" +
    "\004\000\002\053\005\000\002\053\005\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\011\003\000\002\011\004\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\005\000\002\055\007\000\002\014\006\000\002" +
    "\045\005\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\050\010" +
    "\000\002\050\012\000\002\016\006\000\002\021\006\000" +
    "\002\021\010\000\002\017\005\000\002\017\004\000\002" +
    "\020\004\000\002\022\006\000\002\022\005\000\002\046" +
    "\004\000\002\023\003\000\002\023\005\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\025\011\000\002\025\007\000\002\026\007\000\002" +
    "\027\013\000\002\030\011\000\002\031\003\000\002\031" +
    "\004\000\002\032\006\000\002\032\006\000\002\032\005" +
    "\000\002\032\005\000\002\033\007\000\002\033\007\000" +
    "\002\003\003\000\002\047\004\000\002\041\003\000\002" +
    "\041\005\000\002\042\003\000\002\042\005\000\002\043" +
    "\003\000\002\043\005\000\002\044\003\000\002\044\004" +
    "\000\002\044\004\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\005\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\036\003\000\002" +
    "\036\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\020\003\015\004\005\005\020\006\006\007" +
    "\017\010\014\052\011\001\002\000\004\011\030\001\002" +
    "\000\004\051\uffef\001\002\000\004\051\uffed\001\002\000" +
    "\020\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\052\ufffb\001\002\000\004\051\276\001\002\000\004\015" +
    "\026\001\002\000\016\002\ufffd\004\005\005\020\006\006" +
    "\007\017\010\014\001\002\000\004\002\024\001\002\000" +
    "\004\051\uffeb\001\002\000\004\020\023\001\002\000\020" +
    "\002\ufffe\004\005\005\020\006\006\007\017\010\014\052" +
    "\011\001\002\000\004\051\uffec\001\002\000\004\051\uffee" +
    "\001\002\000\020\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\052\ufffa\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\ufffc\001\002\000\004\002\001\001\002\000" +
    "\016\002\000\004\005\005\020\006\006\007\017\010\014" +
    "\001\002\000\004\016\027\001\002\000\004\011\030\001" +
    "\002\000\060\004\005\005\020\006\006\007\017\010\014" +
    "\015\033\027\036\030\046\041\047\042\054\044\072\045" +
    "\045\046\065\051\107\053\103\054\071\057\060\060\064" +
    "\061\106\062\077\063\105\064\035\065\037\001\002\000" +
    "\016\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\001\002\000\044\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\012\uffe7\042\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\051\uffe7\053\uffe7\054\uffe7\057\uffe7\060\uffe7\001" +
    "\002\000\026\015\033\027\036\030\046\041\047\051\114" +
    "\061\106\062\077\063\105\064\035\065\037\001\002\000" +
    "\044\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\012\uffc5" +
    "\042\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\053\uffc5\054\uffc5\057\uffc5\060\uffc5\001\002\000\060" +
    "\012\uffd7\014\uffd7\016\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\055\uffd7\056\uffd7\001\002\000\070\012\uff99" +
    "\014\uff99\015\uff99\016\uff99\020\uff99\021\uff99\022\uff99\023" +
    "\uff99\024\uff99\025\uff99\026\uff99\031\uff99\032\uff99\033\uff99" +
    "\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\051\uff99\055" +
    "\uff99\056\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99" +
    "\001\002\000\060\012\uffd6\014\uffd6\016\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\055\uffd6\056\uffd6\001\002" +
    "\000\044\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012" +
    "\uffe5\042\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\053\uffe5\054\uffe5\057\uffe5\060\uffe5\001\002\000" +
    "\054\012\uffa9\017\234\020\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\056\uffa9\001\002\000\044\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\012\uffe1\042\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\051\uffe1\053\uffe1\054\uffe1\057" +
    "\uffe1\060\uffe1\001\002\000\044\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\012\uffe0\042\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\053\uffe0\054\uffe0\057\uffe0" +
    "\060\uffe0\001\002\000\052\012\uffaa\020\237\021\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\041\uffaa\056\uffaa\001\002\000\004\015\261" +
    "\001\002\000\070\012\uff98\014\uff98\015\uff98\016\uff98\020" +
    "\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\040\uff98\051\uff98\055\uff98\056\uff98\061\uff98\062\uff98" +
    "\063\uff98\064\uff98\065\uff98\001\002\000\070\012\uff97\014" +
    "\uff97\015\uff97\016\uff97\020\uff97\021\uff97\022\uff97\023\uff97" +
    "\024\uff97\025\uff97\026\uff97\031\uff97\032\uff97\033\uff97\034" +
    "\uff97\035\uff97\036\uff97\037\uff97\040\uff97\051\uff97\055\uff97" +
    "\056\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\001" +
    "\002\000\020\015\033\051\114\061\106\062\077\063\105" +
    "\064\035\065\037\001\002\000\044\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\012\uffdf\042\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\050\uffdf\051\uffdf\053\uffdf\054\uffdf\057" +
    "\uffdf\060\uffdf\001\002\000\052\012\uffb1\014\uffb1\016\uffb1" +
    "\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\055\uffb1\056\uffb1\001\002\000\044\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3\042\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\053" +
    "\uffe3\054\uffe3\057\uffe3\060\uffe3\001\002\000\004\015\252" +
    "\001\002\000\040\004\005\005\020\006\006\007\017\010" +
    "\014\012\251\042\054\044\072\045\045\046\065\051\231" +
    "\053\103\054\071\057\060\060\064\001\002\000\010\012" +
    "\uffca\016\uffca\056\uffca\001\002\000\044\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\012\uffc8\042\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\053\uffc8\054\uffc8" +
    "\057\uffc8\060\uffc8\001\002\000\030\015\033\020\247\027" +
    "\036\030\046\041\047\051\114\061\106\062\077\063\105" +
    "\064\035\065\037\001\002\000\044\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\012\uffe2\042\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\054\uffe2\057" +
    "\uffe2\060\uffe2\001\002\000\044\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\012\uffe4\042\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\047\uffe4\050\uffe4\051\uffe4\053\uffe4\054\uffe4\057\uffe4" +
    "\060\uffe4\001\002\000\060\012\uffab\014\uffab\016\uffab\020" +
    "\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\040\uffab\041\uffab\055\uffab\056\uffab" +
    "\001\002\000\004\020\245\001\002\000\004\015\212\001" +
    "\002\000\044\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7" +
    "\012\uffc7\042\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\053\uffc7\054\uffc7\057\uffc7\060\uffc7\001\002" +
    "\000\044\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\012" +
    "\uffe8\042\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\053\uffe8\054\uffe8\057\uffe8\060\uffe8\001\002\000" +
    "\060\012\uffaf\014\uffaf\016\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\036\030\046\031" +
    "\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\047\055\uffaf\056\uffaf\001\002\000\004\015" +
    "\205\001\002\000\004\015\201\001\002\000\044\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\012\uffc6\042\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\053\uffc6" +
    "\054\uffc6\057\uffc6\060\uffc6\001\002\000\036\012\uffb5\014" +
    "\uffb5\016\uffb5\020\uffb5\031\172\032\177\033\175\034\174" +
    "\035\176\036\171\037\uffb5\040\uffb5\055\uffb5\056\uffb5\001" +
    "\002\000\044\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea" +
    "\012\uffea\042\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050" +
    "\uffea\051\uffea\053\uffea\054\uffea\057\uffea\060\uffea\001\002" +
    "\000\022\012\uffb7\014\uffb7\016\uffb7\020\uffb7\037\165\040" +
    "\167\055\uffb7\056\uffb7\001\002\000\060\012\uffd9\014\uffd9" +
    "\016\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\055" +
    "\uffd9\056\uffd9\001\002\000\044\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\012\uffe6\042\uffe6\044\uffe6\045\uffe6\046" +
    "\uffe6\047\uffe6\050\uffe6\051\uffe6\053\uffe6\054\uffe6\057\uffe6" +
    "\060\uffe6\001\002\000\004\051\151\001\002\000\006\012" +
    "\150\056\125\001\002\000\004\015\144\001\002\000\052" +
    "\012\uffb3\014\uffb3\016\uffb3\020\uffb3\021\135\022\137\023" +
    "\142\024\141\025\134\026\136\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\055\uffb3\056" +
    "\uffb3\001\002\000\060\012\uffd8\014\uffd8\016\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\055\uffd8\056\uffd8\001" +
    "\002\000\060\012\uffda\014\uffda\016\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\055\uffda\056\uffda\001\002\000" +
    "\060\012\uffac\013\110\015\111\017\112\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac" +
    "\037\uffac\040\uffac\041\uffac\056\uffac\001\002\000\030\014" +
    "\130\015\033\027\036\030\046\041\047\051\114\061\106" +
    "\062\077\063\105\064\035\065\037\001\002\000\030\015" +
    "\033\016\123\027\036\030\046\041\047\051\114\061\106" +
    "\062\077\063\105\064\035\065\037\001\002\000\026\015" +
    "\033\027\036\030\046\041\047\051\114\061\106\062\077" +
    "\063\105\064\035\065\037\001\002\000\060\012\uffaa\014" +
    "\uffaa\016\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\055\uffaa\056\uffaa\001\002\000\064\012\uffac\013\120\014" +
    "\uffac\015\111\016\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\055\uffac\056\uffac\001\002\000\060\012\uffa9\014" +
    "\uffa9\016\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9" +
    "\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\055\uffa9\056\uffa9\001\002\000\004\020\117\001\002\000" +
    "\044\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc" +
    "\042\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\053\uffdc\054\uffdc\057\uffdc\060\uffdc\001\002\000\026" +
    "\015\033\027\036\030\046\041\047\051\114\061\106\062" +
    "\077\063\105\064\035\065\037\001\002\000\004\014\122" +
    "\001\002\000\062\012\uffd3\014\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\055\uffd3\056\uffd3" +
    "\001\002\000\060\012\uffcc\014\uffcc\016\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\055\uffcc\056\uffcc\001\002" +
    "\000\006\016\126\056\125\001\002\000\026\015\033\027" +
    "\036\030\046\041\047\051\114\061\106\062\077\063\105" +
    "\064\035\065\037\001\002\000\060\012\uffcd\014\uffcd\016" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\055\uffcd" +
    "\056\uffcd\001\002\000\010\012\uffc9\016\uffc9\056\uffc9\001" +
    "\002\000\004\017\131\001\002\000\004\011\030\001\002" +
    "\000\004\020\133\001\002\000\044\004\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\010\uffd1\012\uffd1\042\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\051\uffd1\053\uffd1\054\uffd1\057" +
    "\uffd1\060\uffd1\001\002\000\026\015\uffa3\027\uffa3\030\uffa3" +
    "\041\uffa3\051\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065" +
    "\uffa3\001\002\000\026\015\uffa7\027\uffa7\030\uffa7\041\uffa7" +
    "\051\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\001" +
    "\002\000\026\015\uffa2\027\uffa2\030\uffa2\041\uffa2\051\uffa2" +
    "\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\001\002\000" +
    "\026\015\uffa6\027\uffa6\030\uffa6\041\uffa6\051\uffa6\061\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\065\uffa6\001\002\000\026\015" +
    "\033\027\036\030\046\041\047\051\114\061\106\062\077" +
    "\063\105\064\035\065\037\001\002\000\026\015\uffa4\027" +
    "\uffa4\030\uffa4\041\uffa4\051\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\064\uffa4\065\uffa4\001\002\000\026\015\uffa5\027\uffa5\030" +
    "\uffa5\041\uffa5\051\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5" +
    "\065\uffa5\001\002\000\052\012\uffb0\014\uffb0\016\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\055\uffb0\056\uffb0\001\002\000\026\015\033" +
    "\027\036\030\046\041\047\051\114\061\106\062\077\063" +
    "\105\064\035\065\037\001\002\000\004\016\146\001\002" +
    "\000\004\020\147\001\002\000\044\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\012\uffb9\042\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\053\uffb9\054\uffb9\057" +
    "\uffb9\060\uffb9\001\002\000\054\002\ufff0\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\012\ufff0\020\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\054\ufff0\057\ufff0\060\ufff0\001\002\000" +
    "\010\013\153\017\154\020\152\001\002\000\044\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\012\uffde\042\uffde\044" +
    "\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\053\uffde" +
    "\054\uffde\057\uffde\060\uffde\001\002\000\026\015\033\027" +
    "\036\030\046\041\047\051\114\061\106\062\077\063\105" +
    "\064\035\065\037\001\002\000\026\015\033\027\036\030" +
    "\046\041\047\051\114\061\106\062\077\063\105\064\035" +
    "\065\037\001\002\000\004\020\156\001\002\000\044\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\012\uffdd\042\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\053" +
    "\uffdd\054\uffdd\057\uffdd\060\uffdd\001\002\000\004\014\160" +
    "\001\002\000\006\017\162\020\161\001\002\000\044\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5\042\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\053" +
    "\uffd5\054\uffd5\057\uffd5\060\uffd5\001\002\000\004\011\030" +
    "\001\002\000\004\020\164\001\002\000\044\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\012\uffd4\042\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\053\uffd4\054" +
    "\uffd4\057\uffd4\060\uffd4\001\002\000\026\015\uff9b\027\uff9b" +
    "\030\uff9b\041\uff9b\051\uff9b\061\uff9b\062\uff9b\063\uff9b\064" +
    "\uff9b\065\uff9b\001\002\000\026\015\033\027\036\030\046" +
    "\041\047\051\114\061\106\062\077\063\105\064\035\065" +
    "\037\001\002\000\026\015\uff9a\027\uff9a\030\uff9a\041\uff9a" +
    "\051\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\001" +
    "\002\000\036\012\uffb4\014\uffb4\016\uffb4\020\uffb4\031\172" +
    "\032\177\033\175\034\174\035\176\036\171\037\uffb4\040" +
    "\uffb4\055\uffb4\056\uffb4\001\002\000\026\015\uff9c\027\uff9c" +
    "\030\uff9c\041\uff9c\051\uff9c\061\uff9c\062\uff9c\063\uff9c\064" +
    "\uff9c\065\uff9c\001\002\000\026\015\uffa1\027\uffa1\030\uffa1" +
    "\041\uffa1\051\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\001\002\000\026\015\033\027\036\030\046\041\047" +
    "\051\114\061\106\062\077\063\105\064\035\065\037\001" +
    "\002\000\026\015\uff9e\027\uff9e\030\uff9e\041\uff9e\051\uff9e" +
    "\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\001\002\000" +
    "\026\015\uff9f\027\uff9f\030\uff9f\041\uff9f\051\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\064\uff9f\065\uff9f\001\002\000\026\015" +
    "\uff9d\027\uff9d\030\uff9d\041\uff9d\051\uff9d\061\uff9d\062\uff9d" +
    "\063\uff9d\064\uff9d\065\uff9d\001\002\000\026\015\uffa0\027" +
    "\uffa0\030\uffa0\041\uffa0\051\uffa0\061\uffa0\062\uffa0\063\uffa0" +
    "\064\uffa0\065\uffa0\001\002\000\052\012\uffb2\014\uffb2\016" +
    "\uffb2\020\uffb2\021\135\022\137\023\142\024\141\025\134" +
    "\026\136\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\040\uffb2\055\uffb2\056\uffb2\001\002\000\026" +
    "\015\033\027\036\030\046\041\047\051\114\061\106\062" +
    "\077\063\105\064\035\065\037\001\002\000\004\016\203" +
    "\001\002\000\004\011\030\001\002\000\044\004\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\010\uffc2\012\uffc2\042\uffc2\044\uffc2" +
    "\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\053\uffc2\054" +
    "\uffc2\057\uffc2\060\uffc2\001\002\000\004\051\206\001\002" +
    "\000\004\016\207\001\002\000\004\020\210\001\002\000" +
    "\044\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\012\uffb8" +
    "\042\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051" +
    "\uffb8\053\uffb8\054\uffb8\057\uffb8\060\uffb8\001\002\000\052" +
    "\012\uffae\014\uffae\016\uffae\020\uffae\021\uffae\022\uffae\023" +
    "\uffae\024\uffae\025\uffae\026\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\055\uffae\056" +
    "\uffae\001\002\000\026\015\033\027\036\030\046\041\047" +
    "\051\114\061\106\062\077\063\105\064\035\065\037\001" +
    "\002\000\004\016\214\001\002\000\004\011\215\001\002" +
    "\000\006\047\221\050\216\001\002\000\004\055\242\001" +
    "\002\000\010\012\240\047\221\050\216\001\002\000\010" +
    "\012\uffbf\047\uffbf\050\uffbf\001\002\000\026\015\033\027" +
    "\036\030\046\041\047\051\114\061\106\062\077\063\105" +
    "\064\035\065\037\001\002\000\004\055\223\001\002\000" +
    "\060\004\005\005\020\006\006\007\017\010\014\015\033" +
    "\027\036\030\046\041\047\042\054\044\072\045\045\046" +
    "\065\051\107\053\103\054\071\057\060\060\064\061\106" +
    "\062\077\063\105\064\035\065\037\001\002\000\010\012" +
    "\uffbc\047\uffbc\050\uffbc\001\002\000\044\004\005\005\020" +
    "\006\006\007\017\010\014\012\uffbd\042\054\044\072\045" +
    "\045\046\065\047\uffbd\050\uffbd\051\231\053\103\054\071" +
    "\057\060\060\064\001\002\000\004\020\227\001\002\000" +
    "\010\012\uffb6\047\uffb6\050\uffb6\001\002\000\004\020\237" +
    "\001\002\000\010\013\110\015\111\017\112\001\002\000" +
    "\004\017\234\001\002\000\044\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\012\uffe9\042\uffe9\044\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\053\uffe9\054\uffe9\057\uffe9" +
    "\060\uffe9\001\002\000\026\015\033\027\036\030\046\041" +
    "\047\051\114\061\106\062\077\063\105\064\035\065\037" +
    "\001\002\000\004\020\236\001\002\000\044\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2\042\uffd2\044\uffd2" +
    "\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\053\uffd2\054" +
    "\uffd2\057\uffd2\060\uffd2\001\002\000\044\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\012\uffcb\042\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\053\uffcb\054\uffcb" +
    "\057\uffcb\060\uffcb\001\002\000\044\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\010\uffc0\012\uffc0\042\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\053\uffc0\054\uffc0\057" +
    "\uffc0\060\uffc0\001\002\000\010\012\uffbe\047\uffbe\050\uffbe" +
    "\001\002\000\060\004\005\005\020\006\006\007\017\010" +
    "\014\015\033\027\036\030\046\041\047\042\054\044\072" +
    "\045\045\046\065\051\107\053\103\054\071\057\060\060" +
    "\064\061\106\062\077\063\105\064\035\065\037\001\002" +
    "\000\010\012\uffbb\047\uffbb\050\uffbb\001\002\000\044\004" +
    "\005\005\020\006\006\007\017\010\014\012\uffba\042\054" +
    "\044\072\045\045\046\065\047\uffba\050\uffba\051\231\053" +
    "\103\054\071\057\060\060\064\001\002\000\044\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\010\uffce\012\uffce\042\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\053\uffce" +
    "\054\uffce\057\uffce\060\uffce\001\002\000\004\020\250\001" +
    "\002\000\044\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\012\uffcf\042\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\053\uffcf\054\uffcf\057\uffcf\060\uffcf\001\002" +
    "\000\044\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\012" +
    "\uffd0\042\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\053\uffd0\054\uffd0\057\uffd0\060\uffd0\001\002\000" +
    "\054\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\012\ufff1\020\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1" +
    "\057\ufff1\060\ufff1\001\002\000\026\015\033\027\036\030" +
    "\046\041\047\051\114\061\106\062\077\063\105\064\035" +
    "\065\037\001\002\000\004\016\254\001\002\000\004\011" +
    "\030\001\002\000\046\004\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\012\uffc3\042\uffc3\043\256\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\053\uffc3\054\uffc3\057\uffc3" +
    "\060\uffc3\001\002\000\004\011\030\001\002\000\044\004" +
    "\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012\uffc4\042\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\053" +
    "\uffc4\054\uffc4\057\uffc4\060\uffc4\001\002\000\052\012\uffad" +
    "\014\uffad\016\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024" +
    "\uffad\025\uffad\026\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\035\uffad\036\uffad\037\uffad\040\uffad\055\uffad\056\uffad\001" +
    "\002\000\004\051\263\001\002\000\004\056\266\001\002" +
    "\000\004\017\264\001\002\000\026\015\033\027\036\030" +
    "\046\041\047\051\114\061\106\062\077\063\105\064\035" +
    "\065\037\001\002\000\004\056\uffdb\001\002\000\026\015" +
    "\033\027\036\030\046\041\047\051\114\061\106\062\077" +
    "\063\105\064\035\065\037\001\002\000\004\056\270\001" +
    "\002\000\026\015\033\027\036\030\046\041\047\051\114" +
    "\061\106\062\077\063\105\064\035\065\037\001\002\000" +
    "\004\016\272\001\002\000\004\011\030\001\002\000\044" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\012\uffc1\042" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\053\uffc1\054\uffc1\057\uffc1\060\uffc1\001\002\000\004\016" +
    "\275\001\002\000\060\012\uffa8\014\uffa8\016\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\041\uffa8\055\uffa8\056\uffa8\001" +
    "\002\000\004\015\300\001\002\000\004\011\ufff8\001\002" +
    "\000\016\004\005\005\020\006\006\007\017\010\014\016" +
    "\304\001\002\000\004\051\310\001\002\000\006\016\ufff4" +
    "\056\ufff4\001\002\000\006\016\306\056\305\001\002\000" +
    "\004\011\ufff6\001\002\000\014\004\005\005\020\006\006" +
    "\007\017\010\014\001\002\000\004\011\ufff5\001\002\000" +
    "\006\016\ufff3\056\ufff3\001\002\000\006\016\ufff2\056\ufff2" +
    "\001\002\000\020\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\052\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\016\002\012\004\015\005\003\006\011\051" +
    "\006\054\007\001\001\000\004\053\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\024\005\003\051\006" +
    "\054\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\003\006\021\051\020\054\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\003\051\020\054\007\001\001\000\002\001" +
    "\001\000\004\053\030\001\001\000\072\003\055\011\054" +
    "\012\074\013\066\014\077\015\062\016\040\017\041\020" +
    "\042\021\060\022\043\023\101\024\037\025\056\026\065" +
    "\027\072\030\033\033\061\037\047\040\067\041\075\042" +
    "\073\043\103\044\051\046\050\050\052\054\100\055\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\273\015\062\016\114\022\112\037\047\040\067\041\075" +
    "\042\073\043\103\044\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\062\016\114\022\112\040" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\012\232\013\066\014" +
    "\077\016\231\017\041\020\042\021\060\022\227\024\037" +
    "\025\056\026\065\027\072\030\033\033\061\046\050\050" +
    "\052\054\100\055\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\245\015\062\016\114\022\112\037" +
    "\047\040\067\041\075\042\073\043\103\044\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\172\001\001" +
    "\000\002\001\001\000\004\036\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\120" +
    "\015\062\016\114\022\112\037\047\040\067\041\075\042" +
    "\073\043\103\044\051\001\001\000\030\003\055\015\062" +
    "\016\114\022\112\023\123\037\047\040\067\041\075\042" +
    "\073\043\103\044\051\001\001\000\026\003\115\015\062" +
    "\016\114\022\112\037\047\040\067\041\075\042\073\043" +
    "\103\044\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\120\015\062\016\114\022\112\037\047\040\067" +
    "\041\075\042\073\043\103\044\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\126\015\062\016\114\022\112\037\047\040" +
    "\067\041\075\042\073\043\103\044\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\015\062\016\114\022\112\037\047\040\067" +
    "\044\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\144\015\062\016\114\022\112" +
    "\037\047\040\067\041\075\042\073\043\103\044\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\156\015\062\016\114\022\112\037\047\040\067" +
    "\041\075\042\073\043\103\044\051\001\001\000\026\003" +
    "\154\015\062\016\114\022\112\037\047\040\067\041\075" +
    "\042\073\043\103\044\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\062\016\114" +
    "\022\112\037\047\040\067\042\167\043\103\044\051\001" +
    "\001\000\002\001\001\000\004\035\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\062\016\114\022" +
    "\112\037\047\040\067\043\177\044\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\137\001\001\000\026\003\201\015\062" +
    "\016\114\022\112\037\047\040\067\041\075\042\073\043" +
    "\103\044\051\001\001\000\002\001\001\000\004\053\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\212\015\062\016\114\022\112\037\047\040" +
    "\067\041\075\042\073\043\103\044\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\216\032\217\001" +
    "\001\000\002\001\001\000\004\032\240\001\001\000\002" +
    "\001\001\000\026\003\221\015\062\016\114\022\112\037" +
    "\047\040\067\041\075\042\073\043\103\044\051\001\001" +
    "\000\002\001\001\000\072\003\225\011\224\012\074\013" +
    "\066\014\077\015\062\016\040\017\041\020\042\021\060" +
    "\022\043\024\037\025\056\026\065\027\072\030\033\033" +
    "\061\037\047\040\067\041\075\042\073\043\103\044\051" +
    "\046\050\047\223\050\052\054\100\055\031\001\001\000" +
    "\002\001\001\000\046\012\232\013\066\014\077\016\231" +
    "\017\041\020\042\021\060\022\227\024\037\025\056\026" +
    "\065\027\072\030\033\033\061\046\050\050\052\054\100" +
    "\055\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\234\015\062\016\114\022\112\037" +
    "\047\040\067\041\075\042\073\043\103\044\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\072\003\225\011\243" +
    "\012\074\013\066\014\077\015\062\016\040\017\041\020" +
    "\042\021\060\022\043\024\037\025\056\026\065\027\072" +
    "\030\033\033\061\037\047\040\067\041\075\042\073\043" +
    "\103\044\051\046\050\047\242\050\052\054\100\055\031" +
    "\001\001\000\002\001\001\000\046\012\232\013\066\014" +
    "\077\016\231\017\041\020\042\021\060\022\227\024\037" +
    "\025\056\026\065\027\072\030\033\033\061\046\050\050" +
    "\052\054\100\055\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\252\015\062\016\114\022\112\037\047" +
    "\040\067\041\075\042\073\043\103\044\051\001\001\000" +
    "\002\001\001\000\004\053\254\001\001\000\002\001\001" +
    "\000\004\053\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\264\015\062\016\114\022\112\037" +
    "\047\040\067\041\075\042\073\043\103\044\051\001\001" +
    "\000\002\001\001\000\026\003\266\015\062\016\114\022" +
    "\112\037\047\040\067\041\075\042\073\043\103\044\051" +
    "\001\001\000\002\001\001\000\026\003\270\015\062\016" +
    "\114\022\112\037\047\040\067\041\075\042\073\043\103" +
    "\044\051\001\001\000\002\001\001\000\004\053\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\276\001\001\000\002\001\001\000\010\007" +
    "\302\010\301\054\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\306\054\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public TablaSimbolos tablaSimbolos = new TablaSimbolos();

    public TipoDatos obtenerTipoExpresion(Symbol expression) {
        if (expression == null) {
             System.err.println("Error semántico: No se puede determinar el tipo de la expresión.");
        }

        Object valor = expression.value;

        if (valor instanceof Integer) {
            return TipoDatos.INTEGER;
        } else if (valor instanceof Float) {
            return TipoDatos.FLOAT;
        } else if (valor instanceof Boolean) {
            return TipoDatos.BOOL;
        } else if (valor instanceof String) {
            String valorStr = (String) valor;
            if (valorStr.length() == 1) {
                return TipoDatos.CHAR;
            } else {
                return TipoDatos.STRING;
            }
        } else {
             System.err.println("Error semántico: Tipo de dato no reconocido en la expresión.");
        }
        return null;
    }

    public void verificarAsignacion(String nombre, Symbol valor) {
        System.out.println("Variable:" + valor.value.toString());
        TipoDatos tipoVariable = tablaSimbolos.obtenerTipo(nombre);
        System.out.println("Tipo: " + tipoVariable);
        TipoDatos tipoValor = obtenerTipoExpresion(valor);
        System.out.println("Tipo: " + tipoValor);

        if (!tablaSimbolos.esTipoCompatible(tipoVariable, tipoValor)) {
             System.err.println("Error semántico: Tipo incompatible en la asignación a la variable '" + nombre + "'.");
        }
    }

    @Override
    public void syntax_error(Symbol s) {
        System.err.println("Error sintáctico en línea " + (s.left) + ", columna " + (s.right));
        System.err.println("Error después del token: " + sym.terminalNames[s.sym - 1]);
    }

    @Override
    public void report_error(String message, Object info) {
        Symbol sym = (Symbol) info;
        System.err.println("Error: " + message + " en línea " + (sym.left) + ", columna " + (sym.right));
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws Exception {
        throw new RuntimeException("Error sintáctico crítico.");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= main funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= funciones main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= error END_STATEMENT 
            {
              Object RESULT =null;
		
                System.err.println("Recuperación: Se ignoró el error hasta ';'");
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= encabezadoFunc bloque 
            {
              String RESULT =null;
		int encabezadoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int encabezadoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object encabezado = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bloque = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Funciones.EncabezadoFuncion encabezadoFuncion = (Funciones.EncabezadoFuncion) encabezado;
    tablaSimbolos.addToSymbolTable(encabezadoFuncion.tipo.toString(), encabezadoFuncion.nombre.toString(), null);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // encabezadoFunc ::= tipos IDENTIFIER parametros 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDatos tipo = (TipoDatos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String params = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Funciones.EncabezadoFuncion(tipo, nombre.toString(), params);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("encabezadoFunc",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main ::= MAIN OPEN_PAREN CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= OPEN_PAREN CLOSE_PAREN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= OPEN_PAREN paramAux CLOSE_PAREN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramAux ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramAux",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramAux ::= paramAux COMMA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramAux",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro ::= tipos IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bloque ::= OPEN_BLOCK sentencias CLOSE_BLOCK 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque ::= OPEN_BLOCK argumentos CLOSE_BLOCK 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipos ::= INTEGER 
            {
              TipoDatos RESULT =null;
		 RESULT = TipoDatos.valueOf("INTEGER") ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipos ::= FLOAT 
            {
              TipoDatos RESULT =null;
		 RESULT = TipoDatos.valueOf("FLOAT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipos ::= BOOL 
            {
              TipoDatos RESULT =null;
		 RESULT = TipoDatos.valueOf("BOOL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipos ::= CHAR 
            {
              TipoDatos RESULT =null;
		 RESULT = TipoDatos.valueOf("CHAR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipos ::= STRING 
            {
              TipoDatos RESULT =null;
		 RESULT = TipoDatos.valueOf("STRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= creacionAsign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= estructuraControl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= io 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= creacionAsignArreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= asignacionArreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= returnStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= breakStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= llamadaFuncionCompleta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // creacion ::= tipos IDENTIFIER END_STATEMENT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDatos tipo = (TipoDatos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    tablaSimbolos.addToSymbolTable(tipo.toString(), (String) nombre, null);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // creacionAsign ::= tipos IDENTIFIER ASSIGN expression END_STATEMENT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TipoDatos tipo = (TipoDatos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    System.out.println("Nombre: " + nombre + " Tipo variable: " + valor.getClass().getName());
    tablaSimbolos.addToSymbolTable(tipo.toString(), (String) nombre, (Symbol) valor);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacionAsign",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // asignacion ::= IDENTIFIER ASSIGN expression END_STATEMENT 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    verificarAsignacion(nombre.toString(), (Symbol) valor);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacionFor ::= IDENTIFIER ASSIGN expression 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    tablaSimbolos.addToSymbolTable("INTEGER", (String) nombre, (Symbol) valor);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionFor",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // literales ::= INT_LITERAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Symbol symbol = (Symbol) stack.peek();
    RESULT = symbol;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // literales ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Symbol symbol = (Symbol) stack.peek();
    RESULT = symbol;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // literales ::= BOOL_LITERAL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Symbol symbol = (Symbol) stack.peek();
    RESULT = symbol;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // literales ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Symbol symbol = (Symbol) stack.peek();
    RESULT = symbol;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // literales ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Symbol symbol = (Symbol) stack.peek();
    RESULT = symbol;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // creacionAsignArreglo ::= tipos IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacionAsignArreglo",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // creacionAsignArreglo ::= tipos IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN bloque END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacionAsignArreglo",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // accesoArreglo ::= IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accesoArreglo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // asignacionArreglo ::= accesoArreglo ASSIGN expression END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionArreglo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // asignacionArreglo ::= IDENTIFIER OPEN_BRACKET CLOSE_BRACKET ASSIGN bloque END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionArreglo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // returnStatement ::= RETURN expression END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // returnStatement ::= RETURN END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnStatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // breakStatement ::= BREAK END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("breakStatement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // llamadaFuncion ::= IDENTIFIER OPEN_PAREN argumentos CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // llamadaFuncion ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // llamadaFuncionCompleta ::= llamadaFuncion END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncionCompleta",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // argumentos ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // argumentos ::= argumentos COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // estructuraControl ::= ifElse 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // estructuraControl ::= while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // estructuraControl ::= for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // estructuraControl ::= switch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ifElse ::= IF OPEN_PAREN expression CLOSE_PAREN bloque ELSE bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifElse",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ifElse ::= IF OPEN_PAREN expression CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifElse",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // while ::= WHILE OPEN_PAREN expression CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // for ::= FOR OPEN_PAREN asignacionFor COMMA expression COMMA expression CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // switch ::= SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BLOCK casos CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // casos ::= caso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // casos ::= casos caso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // caso ::= CASE expression COLON sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // caso ::= CASE expression COLON expressionCompleta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // caso ::= DEFAULT COLON expressionCompleta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // caso ::= DEFAULT COLON sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // io ::= PRINT OPEN_PAREN expression CLOSE_PAREN END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // io ::= READ OPEN_PAREN IDENTIFIER CLOSE_PAREN END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expressionLogica 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = el;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expressionCompleta ::= expression END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionCompleta",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expressionLogica ::= expressionRelacional 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = er;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionLogica",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expressionLogica ::= expressionLogica operadorLogico expressionRelacional 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ol = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = FuncionesOperadores.combinarExpresionesLogicas((Symbol) el,(Symbol) ol,(Symbol) er); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionLogica",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expressionRelacional ::= expressionAritmetica 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ea;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionRelacional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expressionRelacional ::= expressionRelacional operadorRelacional expressionAritmetica 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = FuncionesOperadores.combinarExpresionesRelacionales((Symbol) er,(Symbol) or,(Symbol) ea); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionRelacional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expressionAritmetica ::= expressionUnaria 
            {
              Object RESULT =null;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = eu;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionAritmetica",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expressionAritmetica ::= expressionAritmetica operadorAritmetico expressionUnaria 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object oe = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = FuncionesOperadores.combinarExpresionesAritmeticas((Symbol) ea1,(Symbol) oe,(Symbol) ea2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionAritmetica",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expressionUnaria ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionUnaria",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expressionUnaria ::= termino operadorUnario 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ouleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ouright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ou = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = FuncionesOperadores.combinarExpresionUnaria( (Symbol) t, (Symbol) ou, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionUnaria",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expressionUnaria ::= operadorUnario termino 
            {
              Object RESULT =null;
		int ouleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ouright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ou = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = FuncionesOperadores.combinarExpresionUnaria( (Symbol) t, (Symbol) ou, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionUnaria",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // termino ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tablaSimbolos.obtenerValor(new Symbol (-1, i))
;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // termino ::= literales 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // termino ::= llamadaFuncion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // termino ::= accesoArreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // termino ::= OPEN_PAREN expression CLOSE_PAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operadorAritmetico ::= PLUS 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "+", null);
    RESULT = new Symbol(-1, "+");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operadorAritmetico ::= MINUS 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "-", null);
    RESULT = new Symbol(-1, "-");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operadorAritmetico ::= MULTIPLY 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "*", null);
    RESULT = new Symbol(-1, "*");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operadorAritmetico ::= DIVIDE 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "/", null);
    RESULT = new Symbol(-1, "/");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operadorAritmetico ::= MODULO 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "%", null);
    RESULT = new Symbol(-1, "%");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operadorAritmetico ::= POWER 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "**", null);
    RESULT = new Symbol(-1, "**");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operadorRelacional ::= LESS_THAN 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorRelacional", "<", null);
    RESULT = new Symbol(-1, "<");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operadorRelacional ::= LESS_EQUAL 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorRelacional", "<=", null);
    RESULT = new Symbol(-1, "<=");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operadorRelacional ::= GREATER_THAN 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorRelacional", ">", null);
    RESULT = new Symbol(-1, ">");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operadorRelacional ::= GREATER_EQUAL 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorRelacional", ">=", null);
    RESULT = new Symbol(-1, ">=");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operadorRelacional ::= EQUAL 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorRelacional", "==", null);
    RESULT = new Symbol(-1, "==");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operadorRelacional ::= NOT_EQUAL 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorRelacional", "!=", null);
    RESULT = new Symbol(-1, "!=");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operadorLogico ::= AND 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorLogico", "&&", null);
    RESULT = new Symbol(-1, "&&");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operadorLogico ::= OR 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorLogico", "||", null);
    RESULT = new Symbol(-1, "||");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadorUnario ::= INCREMENT 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorUnario", "++", null);
    RESULT = new Symbol(-1, "++");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operadorUnario ::= DECREMENT 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorUnario", "--", null);
    RESULT = new Symbol(-1, "--");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operadorUnario ::= NOT 
            {
              Object RESULT =null;
		
    tablaSimbolos.addToSymbolTable("OperadorLogico", "!", null);
    RESULT = new Symbol(-1,"!");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

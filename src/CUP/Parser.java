
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package CUP;

import java_cup.runtime.Symbol;
import java.util.HashMap;
import java.util.Map;
import Clases.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\004" +
    "\000\002\004\003\000\002\004\004\000\002\052\004\000" +
    "\002\005\005\000\002\006\006\000\002\053\004\000\002" +
    "\053\005\000\002\007\003\000\002\007\005\000\002\010" +
    "\004\000\002\054\005\000\002\054\005\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\011\003\000\002\011\004\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\005\000\002\056\007\000\002\014\006\000\002" +
    "\046\005\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\051\010" +
    "\000\002\051\012\000\002\017\006\000\002\022\006\000" +
    "\002\022\010\000\002\020\005\000\002\020\004\000\002" +
    "\021\004\000\002\023\006\000\002\023\005\000\002\047" +
    "\004\000\002\024\003\000\002\024\005\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\026\011\000\002\026\007\000\002\027\007\000\002" +
    "\030\013\000\002\031\011\000\002\032\003\000\002\032" +
    "\004\000\002\033\006\000\002\033\006\000\002\033\005" +
    "\000\002\033\005\000\002\034\007\000\002\034\007\000" +
    "\002\003\005\000\002\003\005\000\002\003\003\000\002" +
    "\050\004\000\002\042\005\000\002\042\003\000\002\043" +
    "\005\000\002\043\003\000\002\044\005\000\002\044\003" +
    "\000\002\045\004\000\002\045\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\005\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\040" +
    "\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\020\003\015\004\005\005\020\006\006\007" +
    "\017\010\014\056\011\001\002\000\004\015\030\001\002" +
    "\000\004\055\uffef\001\002\000\004\055\uffed\001\002\000" +
    "\020\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\056\ufffb\001\002\000\004\055\272\001\002\000\004\021" +
    "\026\001\002\000\016\002\ufffd\004\005\005\020\006\006" +
    "\007\017\010\014\001\002\000\004\002\024\001\002\000" +
    "\004\055\uffeb\001\002\000\004\024\023\001\002\000\020" +
    "\002\ufffe\004\005\005\020\006\006\007\017\010\014\056" +
    "\011\001\002\000\004\055\uffec\001\002\000\004\055\uffee" +
    "\001\002\000\020\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\056\ufffa\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\ufffc\001\002\000\004\002\001\001\002\000" +
    "\016\002\000\004\005\005\020\006\006\007\017\010\014" +
    "\001\002\000\004\022\027\001\002\000\004\015\030\001" +
    "\002\000\052\004\005\005\020\006\006\007\017\010\014" +
    "\011\100\012\071\013\036\014\035\021\033\046\050\050" +
    "\066\051\044\052\061\055\101\057\075\060\065\063\077" +
    "\064\054\065\060\001\002\000\016\002\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\001\002\000\044\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\016\uffe7\046\uffe7\050" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\057\uffe7" +
    "\060\uffe7\064\uffe7\065\uffe7\001\002\000\020\011\100\012" +
    "\071\013\036\014\035\021\033\055\107\063\077\001\002" +
    "\000\044\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\016" +
    "\uffc5\046\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\057\uffc5\060\uffc5\064\uffc5\065\uffc5\001\002\000" +
    "\060\016\uffd7\020\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\061\uffd7\062\uffd7\001\002\000\060\016" +
    "\uffd6\020\uffd6\022\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\061\uffd6\062\uffd6\001\002\000\044\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\016\uffe5\046\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\057\uffe5\060" +
    "\uffe5\064\uffe5\065\uffe5\001\002\000\054\016\uffa8\023\231" +
    "\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\062\uffa8\001" +
    "\002\000\044\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\016\uffe1\046\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054" +
    "\uffe1\055\uffe1\057\uffe1\060\uffe1\064\uffe1\065\uffe1\001\002" +
    "\000\044\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\016" +
    "\uffe0\046\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\057\uffe0\060\uffe0\064\uffe0\065\uffe0\001\002\000" +
    "\052\016\uffa9\024\234\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037" +
    "\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9" +
    "\062\uffa9\001\002\000\004\021\255\001\002\000\044\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\016\uffdf\046\uffdf" +
    "\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\057" +
    "\uffdf\060\uffdf\064\uffdf\065\uffdf\001\002\000\054\016\uffae" +
    "\020\uffae\022\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\061\uffae\062" +
    "\uffae\001\002\000\044\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\016\uffe3\046\uffe3\050\uffe3\051\uffe3\052\uffe3\053" +
    "\uffe3\054\uffe3\055\uffe3\057\uffe3\060\uffe3\064\uffe3\065\uffe3" +
    "\001\002\000\004\021\247\001\002\000\040\004\005\005" +
    "\020\006\006\007\017\010\014\016\246\046\050\050\066" +
    "\051\044\052\061\055\226\057\075\060\065\064\054\065" +
    "\060\001\002\000\032\016\uffca\022\uffca\035\116\036\120" +
    "\037\124\040\123\041\115\042\122\043\113\044\126\045" +
    "\125\062\uffca\001\002\000\044\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\016\uffc8\046\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\057\uffc8\060\uffc8\064\uffc8" +
    "\065\uffc8\001\002\000\022\011\100\012\071\013\036\014" +
    "\035\021\033\024\244\055\107\063\077\001\002\000\044" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\016\uffe2\046" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\057\uffe2\060\uffe2\064\uffe2\065\uffe2\001\002\000\044\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\016\uffe4\046\uffe4" +
    "\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\057" +
    "\uffe4\060\uffe4\064\uffe4\065\uffe4\001\002\000\060\016\uffaa" +
    "\020\uffaa\022\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\061\uffaa\062\uffaa\001\002\000\004\024\242\001\002" +
    "\000\004\021\207\001\002\000\044\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\016\uffc7\046\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\057\uffc7\060\uffc7\064" +
    "\uffc7\065\uffc7\001\002\000\044\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\016\uffe8\046\uffe8\050\uffe8\051\uffe8\052" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\057\uffe8\060\uffe8\064\uffe8" +
    "\065\uffe8\001\002\000\060\016\uffac\020\uffac\022\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\033\205\034\204\035\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\061\uffac\062\uffac" +
    "\001\002\000\004\021\200\001\002\000\004\021\174\001" +
    "\002\000\044\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\016\uffc6\046\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\057\uffc6\060\uffc6\064\uffc6\065\uffc6\001\002" +
    "\000\044\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\016" +
    "\uffea\046\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\057\uffea\060\uffea\064\uffea\065\uffea\001\002\000" +
    "\060\016\uffd9\020\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\061\uffd9\062\uffd9\001\002\000\044\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\016\uffe6\046\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\057" +
    "\uffe6\060\uffe6\064\uffe6\065\uffe6\001\002\000\004\055\160" +
    "\001\002\000\006\016\157\062\134\001\002\000\004\021" +
    "\153\001\002\000\054\016\uffb5\020\uffb5\022\uffb5\024\uffb5" +
    "\025\143\026\146\027\151\030\147\031\144\032\145\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\061\uffb5\062\uffb5\001\002\000\060\016" +
    "\uffd8\020\uffd8\022\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8" +
    "\045\uffd8\061\uffd8\062\uffd8\001\002\000\060\016\uffda\020" +
    "\uffda\022\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda" +
    "\061\uffda\062\uffda\001\002\000\060\016\uffab\017\102\021" +
    "\103\023\104\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\062\uffab\001\002\000\022\011\100\012\071\013\036\014" +
    "\035\020\137\021\033\055\107\063\077\001\002\000\022" +
    "\011\100\012\071\013\036\014\035\021\033\022\133\055" +
    "\107\063\077\001\002\000\020\011\100\012\071\013\036" +
    "\014\035\021\033\055\107\063\077\001\002\000\060\016" +
    "\uffa9\020\uffa9\022\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9" +
    "\045\uffa9\061\uffa9\062\uffa9\001\002\000\026\024\131\035" +
    "\116\036\120\037\124\040\123\041\115\042\122\043\113" +
    "\044\126\045\125\001\002\000\064\016\uffab\017\111\020" +
    "\uffab\021\103\022\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\061\uffab\062\uffab\001\002\000\060\016\uffa8\020" +
    "\uffa8\022\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8" +
    "\061\uffa8\062\uffa8\001\002\000\020\011\100\012\071\013" +
    "\036\014\035\021\033\055\107\063\077\001\002\000\026" +
    "\020\121\035\116\036\120\037\124\040\123\041\115\042" +
    "\122\043\113\044\126\045\125\001\002\000\020\011\uff9a" +
    "\012\uff9a\013\uff9a\014\uff9a\021\uff9a\055\uff9a\063\uff9a\001" +
    "\002\000\020\011\100\012\071\013\036\014\035\021\033" +
    "\055\107\063\077\001\002\000\020\011\uff9c\012\uff9c\013" +
    "\uff9c\014\uff9c\021\uff9c\055\uff9c\063\uff9c\001\002\000\020" +
    "\011\uffa0\012\uffa0\013\uffa0\014\uffa0\021\uffa0\055\uffa0\063" +
    "\uffa0\001\002\000\020\011\100\012\071\013\036\014\035" +
    "\021\033\055\107\063\077\001\002\000\020\011\uff9f\012" +
    "\uff9f\013\uff9f\014\uff9f\021\uff9f\055\uff9f\063\uff9f\001\002" +
    "\000\062\016\uffd3\020\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\061\uffd3\062\uffd3\001\002" +
    "\000\020\011\uff9b\012\uff9b\013\uff9b\014\uff9b\021\uff9b\055" +
    "\uff9b\063\uff9b\001\002\000\020\011\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\021\uff9d\055\uff9d\063\uff9d\001\002\000\020\011" +
    "\uff9e\012\uff9e\013\uff9e\014\uff9e\021\uff9e\055\uff9e\063\uff9e" +
    "\001\002\000\020\011\uff98\012\uff98\013\uff98\014\uff98\021" +
    "\uff98\055\uff98\063\uff98\001\002\000\020\011\uff99\012\uff99" +
    "\013\uff99\014\uff99\021\uff99\055\uff99\063\uff99\001\002\000" +
    "\040\016\uffb7\020\uffb7\022\uffb7\024\uffb7\035\116\036\120" +
    "\037\124\040\123\041\115\042\122\043\113\044\126\045" +
    "\125\061\uffb7\062\uffb7\001\002\000\040\016\uffb6\020\uffb6" +
    "\022\uffb6\024\uffb6\035\116\036\120\037\124\040\123\041" +
    "\115\042\122\043\113\044\126\045\125\061\uffb6\062\uffb6" +
    "\001\002\000\044\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\016\uffdc\046\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\054\uffdc\055\uffdc\057\uffdc\060\uffdc\064\uffdc\065\uffdc\001" +
    "\002\000\006\022\135\062\134\001\002\000\060\016\uffcc" +
    "\020\uffcc\022\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\061\uffcc\062\uffcc\001\002\000\020\011\100\012\071" +
    "\013\036\014\035\021\033\055\107\063\077\001\002\000" +
    "\060\016\uffcd\020\uffcd\022\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\061\uffcd\062\uffcd\001\002\000\032\016" +
    "\uffc9\022\uffc9\035\116\036\120\037\124\040\123\041\115" +
    "\042\122\043\113\044\126\045\125\062\uffc9\001\002\000" +
    "\004\023\140\001\002\000\004\015\030\001\002\000\004" +
    "\024\142\001\002\000\044\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\016\uffd1\046\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\053\uffd1\054\uffd1\055\uffd1\057\uffd1\060\uffd1\064\uffd1\065" +
    "\uffd1\001\002\000\020\011\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\021\uffa6\055\uffa6\063\uffa6\001\002\000\020\011\uffa2\012" +
    "\uffa2\013\uffa2\014\uffa2\021\uffa2\055\uffa2\063\uffa2\001\002" +
    "\000\020\011\uffa1\012\uffa1\013\uffa1\014\uffa1\021\uffa1\055" +
    "\uffa1\063\uffa1\001\002\000\020\011\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\021\uffa5\055\uffa5\063\uffa5\001\002\000\020\011" +
    "\uffa3\012\uffa3\013\uffa3\014\uffa3\021\uffa3\055\uffa3\063\uffa3" +
    "\001\002\000\020\011\100\012\071\013\036\014\035\021" +
    "\033\055\107\063\077\001\002\000\020\011\uffa4\012\uffa4" +
    "\013\uffa4\014\uffa4\021\uffa4\055\uffa4\063\uffa4\001\002\000" +
    "\054\016\uffaf\020\uffaf\022\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\061\uffaf\062\uffaf\001\002\000\020\011\100\012\071\013" +
    "\036\014\035\021\033\055\107\063\077\001\002\000\026" +
    "\022\155\035\116\036\120\037\124\040\123\041\115\042" +
    "\122\043\113\044\126\045\125\001\002\000\004\024\156" +
    "\001\002\000\044\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\016\uffb9\046\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\057\uffb9\060\uffb9\064\uffb9\065\uffb9\001" +
    "\002\000\054\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\016\ufff0\024\ufff0\046\ufff0\047\ufff0\050\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0" +
    "\060\ufff0\064\ufff0\065\ufff0\001\002\000\010\017\162\023" +
    "\163\024\161\001\002\000\044\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\010\uffde\016\uffde\046\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\057\uffde\060\uffde\064\uffde" +
    "\065\uffde\001\002\000\020\011\100\012\071\013\036\014" +
    "\035\021\033\055\107\063\077\001\002\000\020\011\100" +
    "\012\071\013\036\014\035\021\033\055\107\063\077\001" +
    "\002\000\026\024\165\035\116\036\120\037\124\040\123" +
    "\041\115\042\122\043\113\044\126\045\125\001\002\000" +
    "\044\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\016\uffdd" +
    "\046\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055" +
    "\uffdd\057\uffdd\060\uffdd\064\uffdd\065\uffdd\001\002\000\026" +
    "\020\167\035\116\036\120\037\124\040\123\041\115\042" +
    "\122\043\113\044\126\045\125\001\002\000\006\023\171" +
    "\024\170\001\002\000\044\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\016\uffd5\046\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\057\uffd5\060\uffd5\064\uffd5\065" +
    "\uffd5\001\002\000\004\015\030\001\002\000\004\024\173" +
    "\001\002\000\044\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\016\uffd4\046\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\055\uffd4\057\uffd4\060\uffd4\064\uffd4\065\uffd4\001" +
    "\002\000\020\011\100\012\071\013\036\014\035\021\033" +
    "\055\107\063\077\001\002\000\026\022\176\035\116\036" +
    "\120\037\124\040\123\041\115\042\122\043\113\044\126" +
    "\045\125\001\002\000\004\015\030\001\002\000\044\004" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\016\uffc2\046\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\057" +
    "\uffc2\060\uffc2\064\uffc2\065\uffc2\001\002\000\004\055\201" +
    "\001\002\000\004\022\202\001\002\000\004\024\203\001" +
    "\002\000\044\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\016\uffb8\046\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\055\uffb8\057\uffb8\060\uffb8\064\uffb8\065\uffb8\001\002" +
    "\000\054\016\uff96\020\uff96\022\uff96\024\uff96\025\uff96\026" +
    "\uff96\027\uff96\030\uff96\031\uff96\032\uff96\035\uff96\036\uff96" +
    "\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045" +
    "\uff96\061\uff96\062\uff96\001\002\000\054\016\uff97\020\uff97" +
    "\022\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\032\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\044\uff97\045\uff97\061\uff97\062\uff97\001" +
    "\002\000\054\016\uffad\020\uffad\022\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\061\uffad\062\uffad\001\002\000\020\011\100\012" +
    "\071\013\036\014\035\021\033\055\107\063\077\001\002" +
    "\000\026\022\211\035\116\036\120\037\124\040\123\041" +
    "\115\042\122\043\113\044\126\045\125\001\002\000\004" +
    "\015\212\001\002\000\006\053\216\054\213\001\002\000" +
    "\004\061\237\001\002\000\010\016\235\053\216\054\213" +
    "\001\002\000\010\016\uffbf\053\uffbf\054\uffbf\001\002\000" +
    "\020\011\100\012\071\013\036\014\035\021\033\055\107" +
    "\063\077\001\002\000\026\035\116\036\120\037\124\040" +
    "\123\041\115\042\122\043\113\044\126\045\125\061\220" +
    "\001\002\000\052\004\005\005\020\006\006\007\017\010" +
    "\014\011\100\012\071\013\036\014\035\021\033\046\050" +
    "\050\066\051\044\052\061\055\101\057\075\060\065\063" +
    "\077\064\054\065\060\001\002\000\010\016\uffbc\053\uffbc" +
    "\054\uffbc\001\002\000\044\004\005\005\020\006\006\007" +
    "\017\010\014\016\uffbd\046\050\050\066\051\044\052\061" +
    "\053\uffbd\054\uffbd\055\226\057\075\060\065\064\054\065" +
    "\060\001\002\000\026\024\224\035\116\036\120\037\124" +
    "\040\123\041\115\042\122\043\113\044\126\045\125\001" +
    "\002\000\010\016\uffb4\053\uffb4\054\uffb4\001\002\000\004" +
    "\024\234\001\002\000\010\017\102\021\103\023\104\001" +
    "\002\000\004\023\231\001\002\000\044\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\016\uffe9\046\uffe9\050\uffe9\051" +
    "\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\057\uffe9\060\uffe9" +
    "\064\uffe9\065\uffe9\001\002\000\020\011\100\012\071\013" +
    "\036\014\035\021\033\055\107\063\077\001\002\000\026" +
    "\024\233\035\116\036\120\037\124\040\123\041\115\042" +
    "\122\043\113\044\126\045\125\001\002\000\044\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\010\uffd2\016\uffd2\046\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\057\uffd2" +
    "\060\uffd2\064\uffd2\065\uffd2\001\002\000\044\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\016\uffcb\046\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\057\uffcb\060" +
    "\uffcb\064\uffcb\065\uffcb\001\002\000\044\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\016\uffc0\046\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\057\uffc0\060\uffc0" +
    "\064\uffc0\065\uffc0\001\002\000\010\016\uffbe\053\uffbe\054" +
    "\uffbe\001\002\000\052\004\005\005\020\006\006\007\017" +
    "\010\014\011\100\012\071\013\036\014\035\021\033\046" +
    "\050\050\066\051\044\052\061\055\101\057\075\060\065" +
    "\063\077\064\054\065\060\001\002\000\010\016\uffbb\053" +
    "\uffbb\054\uffbb\001\002\000\044\004\005\005\020\006\006" +
    "\007\017\010\014\016\uffba\046\050\050\066\051\044\052" +
    "\061\053\uffba\054\uffba\055\226\057\075\060\065\064\054" +
    "\065\060\001\002\000\044\004\uffce\005\uffce\006\uffce\007" +
    "\uffce\010\uffce\016\uffce\046\uffce\050\uffce\051\uffce\052\uffce" +
    "\053\uffce\054\uffce\055\uffce\057\uffce\060\uffce\064\uffce\065" +
    "\uffce\001\002\000\026\024\245\035\116\036\120\037\124" +
    "\040\123\041\115\042\122\043\113\044\126\045\125\001" +
    "\002\000\044\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\016\uffcf\046\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\057\uffcf\060\uffcf\064\uffcf\065\uffcf\001\002" +
    "\000\044\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\016" +
    "\uffd0\046\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\055\uffd0\057\uffd0\060\uffd0\064\uffd0\065\uffd0\001\002\000" +
    "\054\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\016\ufff1\024\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\064\ufff1\065\ufff1\001\002\000\020\011\100\012\071\013" +
    "\036\014\035\021\033\055\107\063\077\001\002\000\026" +
    "\022\251\035\116\036\120\037\124\040\123\041\115\042" +
    "\122\043\113\044\126\045\125\001\002\000\004\015\030" +
    "\001\002\000\046\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\016\uffc3\046\uffc3\047\253\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\057\uffc3\060\uffc3\064\uffc3\065" +
    "\uffc3\001\002\000\004\015\030\001\002\000\044\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\016\uffc4\046\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\057\uffc4" +
    "\060\uffc4\064\uffc4\065\uffc4\001\002\000\004\055\257\001" +
    "\002\000\004\062\262\001\002\000\004\023\260\001\002" +
    "\000\020\011\100\012\071\013\036\014\035\021\033\055" +
    "\107\063\077\001\002\000\026\035\116\036\120\037\124" +
    "\040\123\041\115\042\122\043\113\044\126\045\125\062" +
    "\uffdb\001\002\000\020\011\100\012\071\013\036\014\035" +
    "\021\033\055\107\063\077\001\002\000\026\035\116\036" +
    "\120\037\124\040\123\041\115\042\122\043\113\044\126" +
    "\045\125\062\264\001\002\000\020\011\100\012\071\013" +
    "\036\014\035\021\033\055\107\063\077\001\002\000\026" +
    "\022\266\035\116\036\120\037\124\040\123\041\115\042" +
    "\122\043\113\044\126\045\125\001\002\000\004\015\030" +
    "\001\002\000\044\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\016\uffc1\046\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\057\uffc1\060\uffc1\064\uffc1\065\uffc1\001" +
    "\002\000\026\022\271\035\116\036\120\037\124\040\123" +
    "\041\115\042\122\043\113\044\126\045\125\001\002\000" +
    "\060\016\uffa7\020\uffa7\022\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\061\uffa7\062\uffa7\001\002\000\004\021" +
    "\274\001\002\000\004\015\ufff8\001\002\000\016\004\005" +
    "\005\020\006\006\007\017\010\014\022\300\001\002\000" +
    "\004\055\304\001\002\000\006\022\ufff4\062\ufff4\001\002" +
    "\000\006\022\302\062\301\001\002\000\004\015\ufff6\001" +
    "\002\000\014\004\005\005\020\006\006\007\017\010\014" +
    "\001\002\000\004\015\ufff5\001\002\000\006\022\ufff3\062" +
    "\ufff3\001\002\000\006\022\ufff2\062\ufff2\001\002\000\020" +
    "\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\056" +
    "\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\016\002\012\004\015\005\003\006\011\052" +
    "\006\055\007\001\001\000\004\054\304\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\024\005\003\052\006" +
    "\055\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\003\006\021\052\020\055\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\003\052\020\055\007\001\001\000\002\001" +
    "\001\000\004\054\030\001\001\000\064\003\051\011\050" +
    "\012\067\013\062\014\071\015\056\017\037\020\040\021" +
    "\041\022\054\023\042\024\073\025\036\026\052\027\061" +
    "\030\066\031\033\034\055\041\063\044\075\045\045\047" +
    "\044\051\046\055\072\056\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\267\015\056\017\107\023" +
    "\104\041\063\044\075\045\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\012\227" +
    "\013\062\014\071\017\226\020\040\021\041\022\054\023" +
    "\224\025\036\026\052\027\061\030\066\031\033\034\055" +
    "\047\044\051\046\055\072\056\031\001\001\000\006\036" +
    "\113\037\116\001\001\000\002\001\001\000\020\003\242" +
    "\015\056\017\107\023\104\041\063\044\075\045\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\111\015\056\017\107\023\104\041\063\044\075\045" +
    "\045\001\001\000\022\003\051\015\056\017\107\023\104" +
    "\024\131\041\063\044\075\045\045\001\001\000\020\003" +
    "\105\015\056\017\107\023\104\041\063\044\075\045\045" +
    "\001\001\000\002\001\001\000\006\036\113\037\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\111" +
    "\015\056\017\107\023\104\041\063\044\075\045\045\001" +
    "\001\000\006\036\113\037\116\001\001\000\002\001\001" +
    "\000\020\003\127\015\056\017\107\023\104\041\063\044" +
    "\075\045\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\126\015\056\017\107\023\104\041\063\044" +
    "\075\045\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\113\037\116" +
    "\001\001\000\006\036\113\037\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\135" +
    "\015\056\017\107\023\104\041\063\044\075\045\045\001" +
    "\001\000\002\001\001\000\006\036\113\037\116\001\001" +
    "\000\002\001\001\000\004\054\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\015\056\017\107\023\104\041\063\045\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\153\015" +
    "\056\017\107\023\104\041\063\044\075\045\045\001\001" +
    "\000\006\036\113\037\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\165\015\056\017\107\023\104\041" +
    "\063\044\075\045\045\001\001\000\020\003\163\015\056" +
    "\017\107\023\104\041\063\044\075\045\045\001\001\000" +
    "\006\036\113\037\116\001\001\000\002\001\001\000\006" +
    "\036\113\037\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\174\015\056\017\107\023\104\041" +
    "\063\044\075\045\045\001\001\000\006\036\113\037\116" +
    "\001\001\000\004\054\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\207\015\056\017\107\023\104\041\063" +
    "\044\075\045\045\001\001\000\006\036\113\037\116\001" +
    "\001\000\002\001\001\000\006\032\213\033\214\001\001" +
    "\000\002\001\001\000\004\033\235\001\001\000\002\001" +
    "\001\000\020\003\216\015\056\017\107\023\104\041\063" +
    "\044\075\045\045\001\001\000\006\036\113\037\116\001" +
    "\001\000\064\003\222\011\221\012\067\013\062\014\071" +
    "\015\056\017\037\020\040\021\041\022\054\023\042\025" +
    "\036\026\052\027\061\030\066\031\033\034\055\041\063" +
    "\044\075\045\045\047\044\050\220\051\046\055\072\056" +
    "\031\001\001\000\002\001\001\000\046\012\227\013\062" +
    "\014\071\017\226\020\040\021\041\022\054\023\224\025" +
    "\036\026\052\027\061\030\066\031\033\034\055\047\044" +
    "\051\046\055\072\056\031\001\001\000\006\036\113\037" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\231\015\056\017\107\023\104\041\063\044\075\045\045" +
    "\001\001\000\006\036\113\037\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\003\222\011\240\012\067\013\062\014\071\015" +
    "\056\017\037\020\040\021\041\022\054\023\042\025\036" +
    "\026\052\027\061\030\066\031\033\034\055\041\063\044" +
    "\075\045\045\047\044\050\237\051\046\055\072\056\031" +
    "\001\001\000\002\001\001\000\046\012\227\013\062\014" +
    "\071\017\226\020\040\021\041\022\054\023\224\025\036" +
    "\026\052\027\061\030\066\031\033\034\055\047\044\051" +
    "\046\055\072\056\031\001\001\000\002\001\001\000\006" +
    "\036\113\037\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\247\015\056\017\107" +
    "\023\104\041\063\044\075\045\045\001\001\000\006\036" +
    "\113\037\116\001\001\000\004\054\251\001\001\000\002" +
    "\001\001\000\004\054\253\001\001\000\002\001\001\000" +
    "\004\046\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\260\015\056\017\107\023\104\041\063\044" +
    "\075\045\045\001\001\000\006\036\113\037\116\001\001" +
    "\000\020\003\262\015\056\017\107\023\104\041\063\044" +
    "\075\045\045\001\001\000\006\036\113\037\116\001\001" +
    "\000\020\003\264\015\056\017\107\023\104\041\063\044" +
    "\075\045\045\001\001\000\006\036\113\037\116\001\001" +
    "\000\004\054\266\001\001\000\002\001\001\000\006\036" +
    "\113\037\116\001\001\000\002\001\001\000\004\053\272" +
    "\001\001\000\002\001\001\000\010\007\276\010\275\055" +
    "\274\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\302\055\274\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public TablaSimbolos tablaSimbolos = new TablaSimbolos();

    public void addToTable(String tipo, String nombre, Symbol valor) {
        tablaSimbolos.addToSymbolTable(tipo, nombre, valor, 1, 1);
    }

    public TipoDatos obtenerTipoExpresion(Symbol expression) {
        if (expression == null) {
             System.err.println("Error semántico: No se puede determinar el tipo de la expresión.");
        }

        Object valor = expression.value;

        if (valor instanceof Integer) {
            return TipoDatos.INTEGER;
        } else if (valor instanceof Float) {
            return TipoDatos.FLOAT;
        } else if (valor instanceof Boolean) {
            return TipoDatos.BOOL;
        } else if (valor instanceof String) {
            String valorStr = (String) valor;
            if (valorStr.length() == 1) {
                return TipoDatos.CHAR;
            } else {
                return TipoDatos.STRING;
            }
        } else {
             System.err.println("Error semántico: Tipo de dato no reconocido en la expresión.");
        }
        return null;
    }

    public void verificarAsignacion(String nombre, Symbol valor) {
        System.out.println("Variable:" + valor.value.toString());
        TipoDatos tipoVariable = tablaSimbolos.obtenerTipo(nombre);
        TipoDatos tipoValor = obtenerTipoExpresion(valor);

        if (!tablaSimbolos.esTipoCompatible(tipoVariable, tipoValor)) {
             System.err.println("Error semántico: Tipo incompatible en la asignación a la variable '" + nombre + "'.");
        }
    }

    /**
     * Combina dos expresiones y un operador en un único símbolo.
     *
     * @param operandoIzquierdo El símbolo que representa la expresión del lado izquierdo.
     * @param operador El símbolo que representa el operador.
     * @param operandoDerecho El símbolo que representa la expresión del lado derecho.
     * @return Un nuevo símbolo que representa la combinación de las expresiones.
     */
    public Symbol combinarExpresiones(Symbol operandoIzquierdo, Symbol operador, Symbol operandoDerecho) {
        String izquierda = operandoIzquierdo.value.toString();
        String oper = operador.value.toString();
        String derecha = operandoDerecho.value.toString();

        String expresionCombinada = izquierda + " " + oper + " " + derecha;
        return new Symbol(-1, expresionCombinada);
    }

    /**
     * Combina un término y un operador unario en un único símbolo.
     *
     * @param operadorUnario El símbolo que representa el operador unario.
     * @param termino El símbolo que representa el término afectado por el operador.
     * @return Un nuevo símbolo que representa la expresión unaria combinada.
     */
    public Symbol combinarExpresionUnaria(Symbol termino, Symbol operadorUnario) {
        // Obtener las cadenas representativas del operador unario y el término.
        String term = termino.value.toString();
        String operador = operadorUnario.value.toString();

        // Construir la representación combinada de la expresión unaria.
        String expresionUnaria = term + " " + operador ;

        // Crear un nuevo símbolo para la expresión combinada.
        return new Symbol(-1, expresionUnaria);
    }

    /**
     * Combina un término y una expression con parentesis en un único símbolo.
     *
     * @param expression El símbolo que representa el operador unario.
     * @param p1 El símbolo que representa el término afectado por el operador.
     * @param p2 El símbolo que representa el término afectado por el operador.
     * @return Un nuevo símbolo que representa la expresión unaria combinada.
     */
    public Symbol combinarExpresionParen(String p1, Symbol expression, String p2) {
        String exp = expression.value.toString();

        String expressionParen = p1 + exp + p2;

        // Crear un nuevo símbolo para la expresión combinada.
        return new Symbol(-1, expressionParen);
    }
    @Override
    public void syntax_error(Symbol s) {
        System.err.println("Error sintáctico en línea " + (s.left) + ", columna " + (s.right));
        System.err.println("Error después del token: " + sym.terminalNames[s.sym - 1]);
    }

    @Override
    public void report_error(String message, Object info) {
        Symbol sym = (Symbol) info;
        System.err.println("Error: " + message + " en línea " + (sym.left) + ", columna " + (sym.right));
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws Exception {
        throw new RuntimeException("Error sintáctico crítico.");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= main funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= funciones main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= error END_STATEMENT 
            {
              Object RESULT =null;
		
                System.err.println("Recuperación: Se ignoró el error hasta ';'");
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= encabezadoFunc bloque 
            {
              String RESULT =null;
		int encabezadoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int encabezadoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object encabezado = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bloque = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Funciones.EncabezadoFuncion encabezadoFuncion = (Funciones.EncabezadoFuncion) encabezado;
    addToTable(encabezadoFuncion.tipo.toString(), encabezadoFuncion.nombre.toString(), null);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // encabezadoFunc ::= tipos IDENTIFIER parametros 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDatos tipo = (TipoDatos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String params = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    // Llamar a Funciones.EncabezadoFuncion para crear el objeto de encabezado
    RESULT = new Funciones.EncabezadoFuncion(tipo, nombre.toString(), params);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("encabezadoFunc",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main ::= MAIN OPEN_PAREN CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= OPEN_PAREN CLOSE_PAREN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= OPEN_PAREN paramAux CLOSE_PAREN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramAux ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramAux",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramAux ::= paramAux COMMA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramAux",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro ::= tipos IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bloque ::= OPEN_BLOCK sentencias CLOSE_BLOCK 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque ::= OPEN_BLOCK argumentos CLOSE_BLOCK 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipos ::= INTEGER 
            {
              TipoDatos RESULT =null;
		 RESULT = TipoDatos.valueOf("INTEGER") ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipos ::= FLOAT 
            {
              TipoDatos RESULT =null;
		 RESULT = TipoDatos.valueOf("FLOAT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipos ::= BOOL 
            {
              TipoDatos RESULT =null;
		 RESULT = TipoDatos.valueOf("BOOL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipos ::= CHAR 
            {
              TipoDatos RESULT =null;
		 RESULT = TipoDatos.valueOf("CHAR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipos ::= STRING 
            {
              TipoDatos RESULT =null;
		 RESULT = TipoDatos.valueOf("STRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= creacionAsign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= estructuraControl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= io 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= creacionAsignArreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= asignacionArreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= returnStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= breakStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= llamadaFuncionCompleta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // creacion ::= tipos IDENTIFIER END_STATEMENT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDatos tipo = (TipoDatos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    addToTable(tipo.toString(), (String) nombre, null);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // creacionAsign ::= tipos IDENTIFIER ASSIGN expression END_STATEMENT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TipoDatos tipo = (TipoDatos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    addToTable(tipo.toString(), (String) nombre, (Symbol) valor);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacionAsign",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // asignacion ::= IDENTIFIER ASSIGN expression END_STATEMENT 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    System.out.println("Asignacion:" + nombre.toString());
    verificarAsignacion(nombre.toString(), (Symbol) valor);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacionFor ::= IDENTIFIER ASSIGN expression 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    addToTable("INTEGER", (String) nombre, (Symbol) valor);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionFor",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // literales ::= INT_LITERAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Symbol(-1, i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // literales ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Symbol(-1, f);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // literales ::= BOOL_LITERAL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Symbol(-1, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // literales ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Symbol(-1, s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // literales ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Symbol(-1, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literales",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // creacionAsignArreglo ::= tipos IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacionAsignArreglo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // creacionAsignArreglo ::= tipos IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET ASSIGN bloque END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creacionAsignArreglo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // accesoArreglo ::= IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accesoArreglo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // asignacionArreglo ::= accesoArreglo ASSIGN expression END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionArreglo",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // asignacionArreglo ::= IDENTIFIER OPEN_BRACKET CLOSE_BRACKET ASSIGN bloque END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionArreglo",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // returnStatement ::= RETURN expression END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnStatement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // returnStatement ::= RETURN END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnStatement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // breakStatement ::= BREAK END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("breakStatement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // llamadaFuncion ::= IDENTIFIER OPEN_PAREN argumentos CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // llamadaFuncion ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // llamadaFuncionCompleta ::= llamadaFuncion END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncionCompleta",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // argumentos ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // argumentos ::= argumentos COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // estructuraControl ::= ifElse 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // estructuraControl ::= while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // estructuraControl ::= for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // estructuraControl ::= switch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ifElse ::= IF OPEN_PAREN expression CLOSE_PAREN bloque ELSE bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifElse",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ifElse ::= IF OPEN_PAREN expression CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifElse",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // while ::= WHILE OPEN_PAREN expression CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // for ::= FOR OPEN_PAREN asignacionFor COMMA expression COMMA expression CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // switch ::= SWITCH OPEN_PAREN expression CLOSE_PAREN OPEN_BLOCK casos CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // casos ::= caso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // casos ::= casos caso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // caso ::= CASE expression COLON sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // caso ::= CASE expression COLON expressionCompleta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // caso ::= DEFAULT COLON expressionCompleta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // caso ::= DEFAULT COLON sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // io ::= PRINT OPEN_PAREN expression CLOSE_PAREN END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // io ::= READ OPEN_PAREN IDENTIFIER CLOSE_PAREN END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression operadorLogico expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ol = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = combinarExpresiones((Symbol) e1,(Symbol) ol,(Symbol) e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression operadorRelacional expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = combinarExpresiones((Symbol) e1,(Symbol) or,(Symbol) e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expressionAritmetica 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ea;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expressionCompleta ::= expression END_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionCompleta",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expressionLogica ::= expressionLogica operadorLogico expressionRelacional 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ol = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = combinarExpresiones((Symbol) el,(Symbol) ol,(Symbol) er); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionLogica",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expressionLogica ::= expressionRelacional 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = er;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionLogica",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expressionRelacional ::= expressionRelacional operadorRelacional expressionAritmetica 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = combinarExpresiones((Symbol) er,(Symbol) or,(Symbol) ea); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionRelacional",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expressionRelacional ::= expressionAritmetica 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ea;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionRelacional",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expressionAritmetica ::= expressionAritmetica operadorAritmetico expressionUnaria 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object oe = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = combinarExpresiones((Symbol) ea1,(Symbol) oe,(Symbol) ea2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionAritmetica",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expressionAritmetica ::= expressionUnaria 
            {
              Object RESULT =null;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = eu;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionAritmetica",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expressionUnaria ::= termino operadorUnario 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ouleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ouright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ou = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = combinarExpresionUnaria( tablaSimbolos.obtenerValor((Symbol) t), (Symbol) ou); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionUnaria",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expressionUnaria ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionUnaria",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // termino ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Symbol(-1, i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // termino ::= literales 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // termino ::= llamadaFuncion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // termino ::= accesoArreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // termino ::= OPEN_PAREN expression CLOSE_PAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = combinarExpresionParen("(", (Symbol) e, ")"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operadorAritmetico ::= PLUS 
            {
              Object RESULT =null;
		
    addToTable("OperadorAritmetico", "+", null);
    RESULT = new Symbol(-1, "+");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operadorAritmetico ::= MINUS 
            {
              Object RESULT =null;
		
    addToTable("OperadorAritmetico", "-", null);
    RESULT = new Symbol(-1, "-");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operadorAritmetico ::= MULTIPLY 
            {
              Object RESULT =null;
		
    addToTable("OperadorAritmetico", "*", null);
    RESULT = new Symbol(-1, "*");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operadorAritmetico ::= DIVIDE 
            {
              Object RESULT =null;
		
    addToTable("OperadorAritmetico", "/", null);
    RESULT = new Symbol(-1, "/");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operadorAritmetico ::= MODULO 
            {
              Object RESULT =null;
		
    addToTable("OperadorAritmetico", "%", null);
    RESULT = new Symbol(-1, "%");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operadorAritmetico ::= POWER 
            {
              Object RESULT =null;
		
    addToTable("OperadorAritmetico", "**", null);
    RESULT = new Symbol(-1, "**");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operadorRelacional ::= LESS_THAN 
            {
              Object RESULT =null;
		
    addToTable("OperadorRelacional", "<", null);
    RESULT = new Symbol(-1, "<");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operadorRelacional ::= LESS_EQUAL 
            {
              Object RESULT =null;
		
    addToTable("OperadorRelacional", "<=", null);
    RESULT = new Symbol(-1, "<=");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operadorRelacional ::= GREATER_THAN 
            {
              Object RESULT =null;
		
    addToTable("OperadorRelacional", ">", null);
    RESULT = new Symbol(-1, ">");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operadorRelacional ::= GREATER_EQUAL 
            {
              Object RESULT =null;
		
    addToTable("OperadorRelacional", ">=", null);
    RESULT = new Symbol(-1, ">=");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operadorRelacional ::= EQUAL 
            {
              Object RESULT =null;
		
    addToTable("OperadorRelacional", "==", null);
    RESULT = new Symbol(-1, "==");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operadorRelacional ::= NOT_EQUAL 
            {
              Object RESULT =null;
		
    addToTable("OperadorRelacional", "!=", null);
    RESULT = new Symbol(-1, "!=");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operadorLogico ::= AND 
            {
              Object RESULT =null;
		
    addToTable("OperadorLogico", "&&", null);
    RESULT = new Symbol(-1, "&&");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadorLogico ::= OR 
            {
              Object RESULT =null;
		
    addToTable("OperadorLogico", "||", null);
    RESULT = new Symbol(-1, "||");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operadorLogico ::= NOT 
            {
              Object RESULT =null;
		
    addToTable("OperadorLogico", "!", null);
    RESULT = new Symbol(-1, "!");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operadorUnario ::= INCREMENT 
            {
              Object RESULT =null;
		
    addToTable("OperadorUnario", "++", null);
    RESULT = new Symbol(-1, "++");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operadorUnario ::= DECREMENT 
            {
              Object RESULT =null;
		
    addToTable("OperadorUnario", "--", null);
    RESULT = new Symbol(-1, "--");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

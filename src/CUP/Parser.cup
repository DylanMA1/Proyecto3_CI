package CUP;

import java_cup.runtime.Symbol;
import java.util.HashMap;
import java.util.Map;
import Clases.*;
import java.util.List;
import java.util.ArrayList;

// Modificaciones en producciones
parser code {:
    private static int cont = 1;

    public TablaSimbolos tablaSimbolos = new TablaSimbolos();
    public Semantico analisisSemantico = new Semantico(tablaSimbolos);

    /**
    * Obtiene el tipo de las expresiones en el código.
    *
    * @param expression La expression en la gramática.
    */
    public TipoDatos obtenerTipoExpresion(Symbol expression) {
        if (expression == null) {
             System.err.println("Error semántico: No se puede determinar el tipo de la expresión.");
        }

        Object valor = expression.value;

        if (valor instanceof String) {
            if (((String) valor).equals("INTEGER") || valor.equals("STRING") || valor.equals("BOOL") || valor.equals("FLOAT") || valor.equals("CHAR") || valor.equals("VOID") || valor.equals("UNDEFINED")) {
                return TipoDatos.valueOf((String) valor);
            }
        }

        if (valor instanceof Integer) {
            return TipoDatos.INTEGER;
        } else if (valor instanceof Float) {
            return TipoDatos.FLOAT;
        } else if (valor instanceof Boolean) {
            return TipoDatos.BOOL;
        } else if (valor instanceof String) {
            return TipoDatos.STRING;
        } else if (valor instanceof Character) {
            return TipoDatos.CHAR;
        } else {
            System.err.println("Error semántico: Tipo de dato no reconocido en la expresión.");
        }
        return null;

    }

    /**
    * Verifica las asignaciones en el código.
    *
    * @param nombre El nombre de la funcion.
    * @param valor Los parametros enviados en la llamada.
    */
    public void verificarAsignacion(String nombre, Symbol valor) {

            String ambitoActual = tablaSimbolos.obtenerAmbitoActual();

            Simbolo simboloVariable = tablaSimbolos.obtenerSimbolo(nombre);

            if (simboloVariable ==  null) {
                System.err.println("Error semántico: La variable '" + nombre + "' no está declarada.");
                return;
            }

            if (!simboloVariable.getAmbito().equals(ambitoActual)){
                System.err.println("Error semántico: No se puede asignar un valor a la variable '" + nombre + "' desde un ámbito diferente.");
                return;
            }

            if (valor.value instanceof List) {
                verificarAsignacionArregloCompleto(nombre, valor);
                return;
            }

            TipoDatos tipoVariable = tablaSimbolos.obtenerTipo(nombre);
            TipoDatos tipoValor = obtenerTipoExpresion(valor);

            if (!analisisSemantico.esTipoCompatible(tipoVariable, tipoValor)) {
                 System.err.println("Error semántico: Tipo incompatible en la asignación a la variable '" + nombre + "'.");
            }
    }

    /**
     * Verifica la llamada a una función en el código.
     *
     * @param nombreFuncion El nombre de la funcion.
     * @param parametrosFuncion Los parametros enviados en la llamada.
     * @param argumentosFuncion Los argumentos de la funcion a llamar.
     */
    public void verificarLlamadaFuncion(String nombreFuncion, List<String> parametrosFuncion, List<TipoDatos> argumentosFuncion) {
        // Verificar que el número de parámetros y argumentos coincida
        if (argumentosFuncion.size() != parametrosFuncion.size()) {
            System.err.println("Error semántico: La función '" + nombreFuncion + "' debe recibir " + parametrosFuncion.size() +
                    " argumentos, pero se le están enviando " + argumentosFuncion.size() + ".");
            return;
        }

        // Convertir los parámetros a tipos de datos
        List<TipoDatos> tiposParametros = new ArrayList<>();
        for (String parametro : parametrosFuncion) {
            TipoDatos tipoParametro = obtenerTipoExpresion(new Symbol(-1, parametro));
            if (tipoParametro == null) {
                System.err.println("Error semántico: No se pudo determinar el tipo del parámetro '" + parametro + "'.");
                return;
            }
            tiposParametros.add(tipoParametro);
        }

        // Verificar la compatibilidad de tipos entre parámetros y argumentos
        for (int i = 0; i < argumentosFuncion.size(); i++) {
            TipoDatos tipoParametro = tiposParametros.get(i);
            TipoDatos tipoArgumento = argumentosFuncion.get(i);

            if (!tipoParametro.equals(tipoArgumento)) {
                System.err.println("Error semántico: La función '" + nombreFuncion + "' espera un parámetro de tipo " +
                        tipoParametro + " en la posición " + (i + 1) + ", pero se proporcionó un argumento de tipo " +
                        tipoArgumento + ".");
                return;
            }
        }
    }

    /**
     * Verifica la asignación a un elemento específico del arreglo.
     *
     * @param nombreArreglo El símbolo del arreglo.
     * @param indice         El índice del arreglo.
     * @param valor          El valor a asignar.
     * @throws RuntimeException Si la asignación no es válida.
     */
    private void verificarAsignacionElementoArreglo(String nombreArreglo, Symbol indice, Symbol valor) {
        // Obtener el símbolo del arreglo
        Simbolo simboloArreglo = tablaSimbolos.searchByName(nombreArreglo);

        if (simboloArreglo == null) {
            System.err.println("Error semántico: El arreglo '" + nombreArreglo + "' no está declarado.");
            return;
        }

        // Obtener el ámbito actual
        String ambitoActual = tablaSimbolos.obtenerAmbitoActual();

        // Verificar que la asignación ocurra dentro del mismo ámbito
        if (!simboloArreglo.getAmbito().equals(ambitoActual)) {
            System.err.println("Error semántico: No se puede modificar el arreglo '" + nombreArreglo + "' desde un ámbito diferente.");
            return;
        }

        // Verificar que el índice sea un entero
        if (!(indice.value instanceof Integer)) {
            System.err.println("Error semántico: El índice del arreglo debe ser un entero.");
            return;
        }
        int idx = (Integer) indice.value;

        // Verificar que el índice esté dentro de los límites del arreglo
        if (idx < 0 || idx >= simboloArreglo.getArraySize()) {
            System.err.println("Error semántico: Índice fuera de los límites para el arreglo '" + nombreArreglo + "'.");
            return;
        }

        // Obtener el tipo del valor a asignar
        TipoDatos tipoValor = obtenerTipoExpresion(valor);

        // Verificar compatibilidad de tipos
        if (!analisisSemantico.esTipoCompatible(tablaSimbolos.obtenerTipo(nombreArreglo), tipoValor)) {
            System.err.println("Error semántico: Tipo incompatible en la asignación al arreglo '" + nombreArreglo + "'.");
        }
    }

    /**
     * Verifica la asignación de un arreglo completo.
     *
     * @param nombreArreglo El símbolo del arreglo destino.
     * @param valor          El valor a asignar (debe ser una lista de valores).
     * @throws RuntimeException Si la asignación no es válida.
     */
    private void verificarAsignacionArregloCompleto(String nombreArreglo, Symbol valor) {

        // Verificar que el valor sea una lista de valores
        if (!(valor.value instanceof List)) {
            //throw new RuntimeException("Error semántico: Se esperaba una lista de valores para la asignación del arreglo.");
            System.err.println("Error semántico: Se esperaba una lista de valores para la asignación del arreglo.");
        }
        List<Object> valores = (List<Object>) valor.value;

        // Verificar que el tamaño de la lista coincida con el tamaño del arreglo
        if (valores.size() != tablaSimbolos.searchByName(nombreArreglo).getArraySize()) {
            //throw new RuntimeException("Error semántico: El tamaño de la lista no coincide con el tamaño del arreglo '" + nombreArreglo + "'.");
            System.err.println("Error semántico: Tipo incompatible en la asignación al arreglo '" + nombreArreglo + "'.");
        }

        // Verificar que todos los valores de la lista sean compatibles con el tipo del arreglo
        TipoDatos tipoArreglo = tablaSimbolos.obtenerTipo(nombreArreglo);

        for (Object valorElemento : valores) {
            TipoDatos tipoElemento = obtenerTipoExpresion(new Symbol(-1, valorElemento));

            if (!analisisSemantico.esTipoCompatible(tipoArreglo, tipoElemento)) {
                //throw new RuntimeException("Error semántico: Tipo incompatible en la asignación al arreglo '" + nombreArreglo + "'.");
                System.err.println("Error semántico: Tipo incompatible en la asignación al arreglo '" + nombreArreglo + "'.");
            }
        }
    }

    //Reporte de errores sintacticos
    @Override
    public void syntax_error(Symbol s) {
        System.err.println("Error sintáctico en línea " + (s.left) + ", columna " + (s.right));
        System.err.println("Error después del token: " + sym.terminalNames[s.sym - 1]);
    }

    @Override
    public void report_error(String message, Object info) {
        Symbol sym = (Symbol) info;
        System.err.println("Error: " + message + " en línea " + (sym.left) + ", columna " + (sym.right));
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws Exception {
        System.err.println("Error sintáctico crítico.");
    }

:};

// Declaración de tokens
terminal INTEGER, FLOAT, BOOL, CHAR, STRING;
terminal OPEN_BLOCK, CLOSE_BLOCK, OPEN_BRACKET, CLOSE_BRACKET, OPEN_PAREN, CLOSE_PAREN;
terminal ASSIGN, END_STATEMENT;
terminal PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, POWER;
terminal INCREMENT, DECREMENT;
terminal LESS_THAN, LESS_EQUAL, GREATER_THAN, GREATER_EQUAL, EQUAL, NOT_EQUAL;
terminal AND, OR, NOT;
terminal IF, ELSE, WHILE, FOR, SWITCH, CASE, DEFAULT;
terminal IDENTIFIER, MAIN, PRINT, READ, COLON, COMMA;
terminal RETURN, BREAK;
terminal Object INT_LITERAL, FLOAT_LITERAL, BOOL_LITERAL, STRING_LITERAL, CHAR_LITERAL;

// Declaración de no terminales
non terminal program, expression, funciones, encabezadoFunc, main;
non terminal paramAux, parametro, sentencias, sentencia;
non terminal creacion, asignacion, literales, accesoArreglo, returnStatement, breakStatement;
non terminal asignacionArreglo, llamadaFuncion, argumentos, estructuraControl;
non terminal ifElse, while, for, switch, casos, caso, io, operadorAritmetico, operadorRelacional;
non terminal operadorLogico, operadorUnario, termino;
non terminal expressionLogica, expressionRelacional, expressionAritmetica, expressionUnaria;
non terminal asignacionFor, llamadaFuncionCompleta, expressionCompleta;
non terminal creacionArreglo, creacionAsignArreglo;
non terminal ifElseEncabezado, forEncabezado, whileEncabezado, switchEncabezado;
non terminal openblock, closeblock, encabezadoFor, encabezadoWhile, encabezadoIfElse;
non terminal openSwitch, closeSwitch, encabezadoSwitch;
non terminal TipoDatos tipos;
non terminal Object creacionAsign, funcion, bloque, parametros;

// Precedencia y asociatividad
precedence left OR;
precedence left AND;
precedence left EQUAL, NOT_EQUAL;
precedence left LESS_THAN, LESS_EQUAL, GREATER_THAN, GREATER_EQUAL;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE, MODULO;
precedence left POWER;
precedence right NOT;
precedence nonassoc END_STATEMENT;

// Símbolo inicial
start with program;

// Reglas de producción
program ::= main funciones {:
    tablaSimbolos.asignarAmbito();
    analisisSemantico.iniciarAnalisisSemantico();
:}
          | funciones main {:
    tablaSimbolos.asignarAmbito();
    analisisSemantico.iniciarAnalisisSemantico();
:}
          | funciones {:
    tablaSimbolos.asignarAmbito();
    analisisSemantico.iniciarAnalisisSemantico();
:}
          | main {:
    tablaSimbolos.asignarAmbito();
    analisisSemantico.iniciarAnalisisSemantico();
:}
          | error END_STATEMENT {:
                System.err.println("Recuperación: Se ignoró el error hasta ';'");
          :};

funciones ::= funcion
           | funciones funcion;

funcion ::= encabezadoFunc: encabezado bloque: bloque {:
    Funciones.EncabezadoFuncion encabezadoFuncion = (Funciones.EncabezadoFuncion) encabezado;
    tablaSimbolos.addToSymbolTable(encabezadoFuncion.tipo.toString(), "FUNCTION", encabezadoFuncion.nombre.toString(), null, -1);
:};

encabezadoFunc ::= tipos: tipo IDENTIFIER: nombre parametros: params {:
    RESULT = new Funciones.EncabezadoFuncion(tipo, nombre.toString(), params);
:};

main ::= MAIN OPEN_PAREN CLOSE_PAREN bloque {:
    tablaSimbolos.addToSymbolTable("UNDEFINED", "FUNCTION", "_verano_", null, -1);
:};

parametros ::= OPEN_PAREN CLOSE_PAREN
             | OPEN_PAREN paramAux CLOSE_PAREN;

paramAux ::= parametro
           | paramAux COMMA parametro;

parametro ::= tipos: t IDENTIFIER: nombre {:
    tablaSimbolos.addToSymbolTable(t.toString(), "PARAMETER", (String) nombre, null, -1);
:};

bloque ::= openblock sentencias closeblock
       | openblock argumentos: args closeblock {: RESULT = args; :};

openblock ::= OPEN_BLOCK: o {:
    tablaSimbolos.abrirScope(new Symbol(-1, o));
:};

closeblock ::= CLOSE_BLOCK: c {:
    tablaSimbolos.cerrarScope(new Symbol(-1, c));
:};

tipos ::= INTEGER {: RESULT = TipoDatos.valueOf("INTEGER") ;:}
        | FLOAT {: RESULT = TipoDatos.valueOf("FLOAT"); :}
        | BOOL {: RESULT = TipoDatos.valueOf("BOOL"); :}
        | CHAR {: RESULT = TipoDatos.valueOf("CHAR"); :}
        | STRING {: RESULT = TipoDatos.valueOf("STRING"); :};

sentencias ::= sentencia
             | sentencias sentencia;

sentencia ::= creacion
            | creacionAsign
            | asignacion
            | estructuraControl
            | io
            | creacionAsignArreglo
            | asignacionArreglo
            | returnStatement
            | breakStatement
            | llamadaFuncionCompleta;


creacion ::= tipos: tipo IDENTIFIER: nombre END_STATEMENT {:
    tablaSimbolos.addToSymbolTable(tipo.toString(), "VARIABLE", (String) nombre, null, -1);
:};

creacionAsign ::= tipos: tipo IDENTIFIER: nombre ASSIGN expression: valor END_STATEMENT {:
    tablaSimbolos.addToSymbolTable(tipo.toString(), "VARIABLE", (String) nombre, (Symbol) valor, -1);
    verificarAsignacion(nombre.toString(), (Symbol) valor);
:};

asignacion ::= IDENTIFIER: nombre ASSIGN expression: valor END_STATEMENT {:
    verificarAsignacion(nombre.toString(), (Symbol) valor);
:};

asignacionFor ::= IDENTIFIER: nombre ASSIGN expression: valor {:
    tablaSimbolos.addToSymbolTable("INTEGER", "VARIABLE", (String) nombre, (Symbol) valor, -1);
:};

literales ::= INT_LITERAL:i {:
    Symbol symbol = (Symbol) stack.peek();
    RESULT = symbol;
:}
| FLOAT_LITERAL:f {:
    Symbol symbol = (Symbol) stack.peek();
    RESULT = symbol;
:}
| BOOL_LITERAL:b {:
    Symbol symbol = (Symbol) stack.peek();
    RESULT = symbol;
:}
| STRING_LITERAL:s {:
    Symbol symbol = (Symbol) stack.peek();
    RESULT = symbol;
:}
| CHAR_LITERAL:c {:
    Symbol symbol = (Symbol) stack.peek();
    RESULT = symbol;
:};

creacionArreglo ::= tipos: tipo IDENTIFIER: nombre OPEN_BRACKET expression: size CLOSE_BRACKET END_STATEMENT {:
    int arraySize = (Integer) ((Symbol) size).value;
    tablaSimbolos.addToSymbolTable(tipo.toString(), "ARRAY", (String) nombre, null, arraySize);
:};

creacionAsignArreglo ::= tipos: tipo IDENTIFIER: nombre OPEN_BRACKET expression: size CLOSE_BRACKET ASSIGN bloque: valores END_STATEMENT {:
    int arraySize = (Integer) ((Symbol) size).value;
    tablaSimbolos.addToSymbolTable(tipo.toString(), "ARRAY", (String) nombre, (Symbol) valores, arraySize);
    verificarAsignacionArregloCompleto((String) nombre, (Symbol) valores);
:};

asignacionArreglo ::= IDENTIFIER: nombre OPEN_BRACKET expression: e1 CLOSE_BRACKET ASSIGN expression: e2 END_STATEMENT {:
    verificarAsignacionElementoArreglo((String) nombre, (Symbol) e1, (Symbol) e2);
:}
                    | IDENTIFIER: nombre ASSIGN bloque: b END_STATEMENT {:
    verificarAsignacionArregloCompleto((String) nombre, (Symbol) b);
:};

accesoArreglo ::= IDENTIFIER: nombre OPEN_BRACKET expression: e CLOSE_BRACKET {: RESULT = tablaSimbolos.obtenerValorArreglo((String) nombre, (Symbol) e);:};

returnStatement ::= RETURN expression: valor END_STATEMENT {:
    tablaSimbolos.addToSymbolTable(obtenerTipoExpresion((Symbol) valor).toString(), "RETURN", "return" + cont, (Symbol )valor, -1);
    cont ++;
:}
                 | RETURN END_STATEMENT {:
    tablaSimbolos.addToSymbolTable("VOID", "RETURN", "return" + cont, null, -1);
    cont ++;
:};

breakStatement ::= BREAK END_STATEMENT{:
    tablaSimbolos.addToSymbolTable("VOID", "BREAK", "break" + cont, null, -1);
    cont ++;
:};

llamadaFuncion ::= IDENTIFIER: nombre OPEN_PAREN argumentos: a CLOSE_PAREN {:
    List<String> tipoParametrosFuncion = tablaSimbolos.obtenerTipoParametrosFuncion(new Symbol(-1, nombre)).reversed();
    List<Symbol> listaArgumentos = (List<Symbol>) ((Symbol) a).value;
    List<TipoDatos> nuevaListaArgumentos = new ArrayList();

    for (Object argumento: listaArgumentos) {
        nuevaListaArgumentos.add(obtenerTipoExpresion(new Symbol(-1, argumento)));
    }
    verificarLlamadaFuncion((String) nombre, tipoParametrosFuncion, nuevaListaArgumentos);
    RESULT = tablaSimbolos.obtenerTipoRetornoFuncion(new Symbol (-1, nombre));
:}
                 | IDENTIFIER: nombre OPEN_PAREN CLOSE_PAREN {:
    RESULT = tablaSimbolos.obtenerTipoRetornoFuncion(new Symbol (-1, nombre));
:};

llamadaFuncionCompleta ::= llamadaFuncion END_STATEMENT;

argumentos ::= expression: e {:
    List<Object> argumentosList = new ArrayList<>();
    argumentosList.add(((Symbol) e).value);
    RESULT = new Symbol(-1, argumentosList);
:}
             | argumentos: args COMMA expression: e {:
    List<Object> argumentosList = (List<Object>) ((Symbol) args).value;
    argumentosList.add(((Symbol) e).value);
    RESULT = new Symbol(-1, argumentosList);
:};

estructuraControl ::= ifElse
                    | while
                    | for
                    | switch;

ifElse ::= encabezadoIfElse bloque ELSE bloque
         | encabezadoIfElse bloque;

encabezadoIfElse ::= IF OPEN_PAREN expression CLOSE_PAREN {:
    tablaSimbolos.addToSymbolTable("UNDEFINED", "IF", "if" + cont, null, -1);
    cont ++;
:};

while ::= encabezadoWhile bloque;

encabezadoWhile ::= WHILE OPEN_PAREN expression CLOSE_PAREN {:
    tablaSimbolos.addToSymbolTable("UNDEFINED", "CYCLE", "while" + cont, null, -1);
    cont ++;
:};

for ::= encabezadoFor bloque;

encabezadoFor ::= FOR OPEN_PAREN asignacionFor COMMA expression COMMA expression CLOSE_PAREN {:
    tablaSimbolos.addToSymbolTable("UNDEFINED", "CYCLE", "for" + cont, null, -1);
    cont ++;
:};

switch ::= encabezadoSwitch openSwitch casos closeSwitch;

encabezadoSwitch ::= SWITCH OPEN_PAREN expression CLOSE_PAREN {:
    tablaSimbolos.addToSymbolTable("UNDEFINED", "SWITCH", "switch" + cont, null, -1);
    cont ++;
:};

openSwitch ::= OPEN_BLOCK: o {:
    tablaSimbolos.abrirScope(new Symbol(-1, o));
:};

closeSwitch ::= CLOSE_BLOCK: c {:
    tablaSimbolos.cerrarScope(new Symbol(-1, c));
:};

casos ::= caso
        | casos caso;

caso ::= CASE expression COLON sentencias
       | CASE expression COLON expressionCompleta
       | DEFAULT COLON expressionCompleta
       | DEFAULT COLON sentencias;

io ::= PRINT OPEN_PAREN expression CLOSE_PAREN END_STATEMENT
    | READ OPEN_PAREN IDENTIFIER CLOSE_PAREN END_STATEMENT;

expression ::=  expressionLogica: el {:RESULT = el;:};

expressionCompleta ::= expression END_STATEMENT;

expressionLogica ::= expressionRelacional: er {:RESULT = er;:}
                   | expressionLogica: el operadorLogico: ol expressionRelacional: er {: RESULT = FuncionesOperadores.combinarExpresionesLogicas((Symbol) el,(Symbol) ol,(Symbol) er); :};

expressionRelacional ::= expressionAritmetica: ea {:RESULT = ea;:}
                       | expressionRelacional: er operadorRelacional: or expressionAritmetica: ea {: RESULT = FuncionesOperadores.combinarExpresionesRelacionales((Symbol) er,(Symbol) or,(Symbol) ea); :};

expressionAritmetica ::= expressionUnaria: eu {:RESULT = eu;:}
                       | expressionAritmetica: ea1 operadorAritmetico:oe expressionUnaria: ea2 {: RESULT = FuncionesOperadores.combinarExpresionesAritmeticas((Symbol) ea1,(Symbol) oe,(Symbol) ea2); :};

expressionUnaria ::= termino: t {:RESULT = t;:}
                   | termino: t operadorUnario: ou {: RESULT = FuncionesOperadores.combinarExpresionUnaria( (Symbol) t, (Symbol) ou, false); :}
                   | operadorUnario: ou termino: t  {: RESULT = FuncionesOperadores.combinarExpresionUnaria( (Symbol) t, (Symbol) ou, true); :};

termino ::= IDENTIFIER: i {: RESULT = tablaSimbolos.obtenerValor(new Symbol (-1, i));:}
          | literales: l {:RESULT = l;:}
          | llamadaFuncion: lf {: RESULT = lf; :}
          | accesoArreglo: aa {: RESULT = aa; :}
          | OPEN_PAREN expression: e CLOSE_PAREN {: RESULT = e; :};

operadorAritmetico ::= PLUS {:
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "OPERADOR", "+", null, -1);
    RESULT = new Symbol(-1, "+");
:}
                     | MINUS {:
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "OPERADOR", "-", null, -1);
    RESULT = new Symbol(-1, "-");
:}
                     | MULTIPLY {:
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "OPERADOR", "*", null, -1);
    RESULT = new Symbol(-1, "*");
:}
                     | DIVIDE {:
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "OPERADOR", "/", null, -1);
    RESULT = new Symbol(-1, "/");
:}
                     | MODULO {:
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "OPERADOR", "%", null, -1);
    RESULT = new Symbol(-1, "%");
:}
                     | POWER {:
    tablaSimbolos.addToSymbolTable("OperadorAritmetico", "OPERADOR", "**", null, -1);
    RESULT = new Symbol(-1, "**");
:};

operadorRelacional ::= LESS_THAN {:
    tablaSimbolos.addToSymbolTable("OperadorRelacional", "OPERADOR", "<", null, -1);
    RESULT = new Symbol(-1, "<");
:}
                     | LESS_EQUAL {:
    tablaSimbolos.addToSymbolTable("OperadorRelacional", "OPERADOR", "<=", null, -1);
    RESULT = new Symbol(-1, "<=");
:}
                     | GREATER_THAN {:
    tablaSimbolos.addToSymbolTable("OperadorRelacional", "OPERADOR", ">", null, -1);
    RESULT = new Symbol(-1, ">");
:}
                     | GREATER_EQUAL {:
    tablaSimbolos.addToSymbolTable("OperadorRelacional", "OPERADOR",">=", null, -1);
    RESULT = new Symbol(-1, ">=");
:}
                     | EQUAL {:
    tablaSimbolos.addToSymbolTable("OperadorRelacional", "OPERADOR", "==", null, -1);
    RESULT = new Symbol(-1, "==");
:}
                     | NOT_EQUAL {:
    tablaSimbolos.addToSymbolTable("OperadorRelacional", "OPERADOR", "!=", null, -1);
    RESULT = new Symbol(-1, "!=");
:};

operadorLogico ::= AND {:
    tablaSimbolos.addToSymbolTable("OperadorLogico", "OPERADOR", "&&", null, -1);
    RESULT = new Symbol(-1, "&&");
:}
                 | OR {:
    tablaSimbolos.addToSymbolTable("OperadorLogico", "OPERADOR", "||", null, -1);
    RESULT = new Symbol(-1, "||");
:};

operadorUnario ::= INCREMENT {:
    tablaSimbolos.addToSymbolTable("OperadorUnario", "OPERADOR", "++", null, -1);
    RESULT = new Symbol(-1, "++");
:}
                 | DECREMENT {:
    tablaSimbolos.addToSymbolTable("OperadorUnario","OPERADOR", "--", null, -1);
    RESULT = new Symbol(-1, "--");
:}
                 | NOT {:
    tablaSimbolos.addToSymbolTable("OperadorLogico", "OPERADOR", "!", null, -1);
    RESULT = new Symbol(-1,"!");
:};
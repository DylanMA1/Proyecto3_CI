// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/JFLEX/Lexer.jflex

package JFLEX;

// Importaciones necesarias
import java_cup.runtime.Symbol;
import CUP.sym;

// Asignacion de reglas

@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\1\5\3\6\1\7\1\10\1\11\1\12\1\0"+
    "\1\13\1\0\1\14\1\15\12\16\7\0\32\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\0\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\2\17\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\0\1\55"+
    "\10\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\2\1\22\10\1\0\1\11\6\0"+
    "\42\10\1\0\1\12\1\13\2\0\1\14\1\0\46\10"+
    "\2\0\1\15\1\0\11\10\1\16\11\10\1\17\3\10"+
    "\1\20\13\10\1\21\3\10\1\11\2\0\10\10\1\22"+
    "\3\10\1\23\3\10\1\21\5\10\1\24\2\10\1\25"+
    "\3\10\1\26\1\27\1\10\1\30\5\10\2\0\7\10"+
    "\1\31\1\32\1\33\5\10\1\34\1\35\11\10\1\36"+
    "\1\37\1\10\1\40\2\0\11\10\1\41\1\10\1\42"+
    "\4\10\1\43\1\44\1\45\2\10\1\46\1\10\1\47"+
    "\1\0\1\50\3\10\1\51\1\52\1\53\3\10\1\54"+
    "\2\10\1\55\2\10\1\56\1\57\1\0\6\10\1\60"+
    "\1\61\2\10\1\0\1\62\1\10\1\63\4\10\1\64"+
    "\1\0\1\65\3\10\1\66\1\0\1\67\1\10\1\70"+
    "\1\0\1\71\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\56\0\u0114"+
    "\0\56\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256"+
    "\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6"+
    "\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536"+
    "\0\56\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678"+
    "\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8"+
    "\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958"+
    "\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8"+
    "\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38"+
    "\0\u0c66\0\u0c94\0\56\0\u05c0\0\u0cc2\0\u0cf0\0\56\0\u0d1e"+
    "\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e"+
    "\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe"+
    "\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e"+
    "\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de"+
    "\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e"+
    "\0\56\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590"+
    "\0\u15be\0\u15ec\0\u161a\0\u0170\0\u1648\0\u1676\0\u16a4\0\u16d2"+
    "\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u0170\0\u17e6\0\u1814"+
    "\0\u1842\0\u0170\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956"+
    "\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6"+
    "\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36"+
    "\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\u0170\0\u1d1c\0\u1d4a\0\u1d78"+
    "\0\u0170\0\u1da6\0\u1dd4\0\u1e02\0\u0170\0\u1e30\0\u1e5e\0\u1e8c"+
    "\0\u1eba\0\u1ee8\0\u0170\0\u1f16\0\u1f44\0\u0170\0\u1f72\0\u1fa0"+
    "\0\u1fce\0\u0170\0\u0170\0\u1ffc\0\u0170\0\u202a\0\u2058\0\u2086"+
    "\0\u20b4\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a\0\u21c8\0\u21f6"+
    "\0\u2224\0\u2252\0\u2280\0\u0170\0\u0170\0\u0170\0\u22ae\0\u22dc"+
    "\0\u230a\0\u2338\0\u2366\0\u0170\0\u0170\0\u2394\0\u23c2\0\u23f0"+
    "\0\u241e\0\u244c\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u0170\0\u0170"+
    "\0\u2532\0\u0170\0\u2560\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646"+
    "\0\u2674\0\u26a2\0\u26d0\0\u26fe\0\u272c\0\u0170\0\u275a\0\u0170"+
    "\0\u2788\0\u27b6\0\u27e4\0\u2812\0\u0170\0\u0170\0\u0170\0\u2840"+
    "\0\u286e\0\u0170\0\u289c\0\u0170\0\u28ca\0\56\0\u28f8\0\u2926"+
    "\0\u2954\0\u0170\0\u0170\0\u0170\0\u2982\0\u29b0\0\u29de\0\u0170"+
    "\0\u2a0c\0\u2a3a\0\u0170\0\u2a68\0\u2a96\0\u0170\0\u0170\0\u2ac4"+
    "\0\u2af2\0\u2b20\0\u2b4e\0\u2b7c\0\u2baa\0\u2bd8\0\u0170\0\u0170"+
    "\0\u2c06\0\u2c34\0\u2c62\0\u0170\0\u2c90\0\u0170\0\u2cbe\0\u2cec"+
    "\0\u2d1a\0\u2d48\0\u0170\0\u2d76\0\u0170\0\u2da4\0\u2dd2\0\u2e00"+
    "\0\u0170\0\u2e2e\0\u0170\0\u2e5c\0\u0170\0\u2e8a\0\u0170\0\u2eb8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\3\2\1\11\1\2\1\7\1\12\1\13\1\2\1\14"+
    "\2\2\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\13\1\27\1\30\1\31\1\13"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\4\13\1\2"+
    "\57\0\1\3\56\0\1\4\53\0\4\40\1\41\3\40"+
    "\1\42\45\40\2\6\2\0\52\6\7\43\1\0\46\43"+
    "\14\0\1\44\1\0\1\12\55\0\2\13\4\0\31\13"+
    "\25\0\1\45\47\0\2\46\5\0\23\46\1\47\4\46"+
    "\17\0\2\13\4\0\2\13\1\50\1\13\1\51\24\13"+
    "\17\0\2\13\4\0\1\13\1\52\16\13\1\53\10\13"+
    "\17\0\2\13\4\0\11\13\1\54\3\13\1\55\5\13"+
    "\1\56\5\13\17\0\2\13\4\0\23\13\1\57\5\13"+
    "\17\0\2\13\4\0\12\13\1\60\1\13\1\61\4\13"+
    "\1\62\2\13\1\63\4\13\17\0\2\13\4\0\1\13"+
    "\1\64\7\13\1\65\17\13\17\0\2\13\4\0\1\13"+
    "\1\66\16\13\1\67\10\13\17\0\2\13\4\0\1\13"+
    "\1\70\7\13\1\71\17\13\17\0\2\13\4\0\14\13"+
    "\1\72\14\13\17\0\2\13\4\0\1\13\1\73\3\13"+
    "\1\74\3\13\1\75\17\13\17\0\2\13\4\0\1\13"+
    "\1\76\13\13\1\77\13\13\17\0\2\13\4\0\16\13"+
    "\1\100\12\13\17\0\2\13\4\0\23\13\1\101\5\13"+
    "\17\0\2\13\4\0\5\13\1\102\7\13\1\103\13\13"+
    "\17\0\2\13\4\0\11\13\1\104\2\13\1\105\14\13"+
    "\17\0\2\13\4\0\20\13\1\106\10\13\17\0\2\13"+
    "\4\0\12\13\1\107\3\13\1\110\12\13\17\0\2\13"+
    "\4\0\1\13\1\111\27\13\1\0\4\40\1\41\55\40"+
    "\1\41\13\40\1\112\35\40\7\0\1\113\64\0\1\114"+
    "\37\0\21\45\1\115\2\45\1\116\31\45\16\0\2\46"+
    "\4\0\1\117\30\46\17\0\2\46\4\0\1\117\4\46"+
    "\1\120\23\46\17\0\2\13\4\0\20\13\1\121\10\13"+
    "\17\0\2\13\4\0\24\13\1\122\4\13\17\0\2\13"+
    "\4\0\12\13\1\123\16\13\17\0\2\13\4\0\15\13"+
    "\1\124\13\13\17\0\2\13\4\0\5\13\1\125\23\13"+
    "\17\0\2\13\4\0\13\13\1\126\4\13\1\127\10\13"+
    "\17\0\2\13\4\0\16\13\1\130\12\13\17\0\2\13"+
    "\4\0\5\13\1\131\23\13\17\0\2\13\4\0\6\13"+
    "\1\132\22\13\17\0\2\13\4\0\22\13\1\133\1\13"+
    "\1\134\4\13\17\0\2\13\4\0\3\13\1\135\25\13"+
    "\17\0\2\13\4\0\5\13\1\136\23\13\17\0\2\13"+
    "\4\0\12\13\1\137\16\13\17\0\2\13\4\0\14\13"+
    "\1\140\14\13\17\0\2\13\4\0\21\13\1\141\7\13"+
    "\17\0\2\13\4\0\11\13\1\142\17\13\17\0\2\13"+
    "\4\0\4\13\1\143\24\13\17\0\2\13\4\0\21\13"+
    "\1\144\7\13\17\0\2\13\4\0\22\13\1\145\6\13"+
    "\17\0\2\13\4\0\7\13\1\146\10\13\1\147\10\13"+
    "\17\0\2\13\4\0\12\13\1\150\16\13\17\0\2\13"+
    "\4\0\14\13\1\151\14\13\17\0\2\13\4\0\20\13"+
    "\1\152\3\13\1\153\4\13\17\0\2\13\4\0\3\13"+
    "\1\154\25\13\17\0\2\13\4\0\5\13\1\155\23\13"+
    "\17\0\2\13\4\0\11\13\1\156\17\13\17\0\2\13"+
    "\4\0\27\13\1\157\1\13\17\0\2\13\4\0\4\13"+
    "\1\160\24\13\17\0\2\13\4\0\7\13\1\161\21\13"+
    "\17\0\2\13\4\0\15\13\1\162\13\13\17\0\2\13"+
    "\4\0\23\13\1\163\5\13\17\0\2\13\4\0\22\13"+
    "\1\164\6\13\17\0\2\13\4\0\1\13\1\165\27\13"+
    "\17\0\2\13\4\0\20\13\1\166\10\13\1\0\4\40"+
    "\1\41\16\40\1\167\32\40\24\0\1\170\46\0\1\171"+
    "\56\0\2\46\4\0\1\117\17\46\1\172\10\46\17\0"+
    "\2\13\4\0\5\13\1\173\23\13\17\0\2\13\4\0"+
    "\11\13\1\174\17\13\17\0\2\13\4\0\22\13\1\175"+
    "\6\13\17\0\2\13\4\0\13\13\1\176\15\13\17\0"+
    "\2\13\4\0\20\13\1\177\10\13\17\0\2\13\4\0"+
    "\5\13\1\200\23\13\17\0\2\13\4\0\22\13\1\201"+
    "\6\13\17\0\2\13\4\0\11\13\1\202\17\13\17\0"+
    "\2\13\4\0\14\13\1\203\14\13\17\0\2\13\4\0"+
    "\15\13\1\204\13\13\17\0\2\13\4\0\20\13\1\205"+
    "\10\13\17\0\2\13\4\0\11\13\1\206\11\13\1\207"+
    "\5\13\17\0\2\13\4\0\23\13\1\210\5\13\17\0"+
    "\2\13\4\0\20\13\1\211\10\13\17\0\2\13\4\0"+
    "\21\13\1\212\7\13\17\0\2\13\4\0\20\13\1\213"+
    "\10\13\17\0\2\13\4\0\16\13\1\214\12\13\17\0"+
    "\2\13\4\0\14\13\1\215\14\13\17\0\2\13\4\0"+
    "\1\13\1\216\27\13\17\0\2\13\4\0\22\13\1\217"+
    "\6\13\17\0\2\13\4\0\5\13\1\220\23\13\17\0"+
    "\2\13\4\0\15\13\1\221\13\13\17\0\2\13\4\0"+
    "\27\13\1\222\1\13\17\0\2\13\4\0\3\13\1\223"+
    "\25\13\17\0\2\13\4\0\21\13\1\224\7\13\17\0"+
    "\2\13\4\0\20\13\1\225\10\13\17\0\2\13\4\0"+
    "\11\13\1\226\17\13\17\0\2\13\4\0\10\13\1\227"+
    "\20\13\17\0\2\13\4\0\14\13\1\230\14\13\17\0"+
    "\2\13\4\0\5\13\1\231\23\13\17\0\2\13\4\0"+
    "\5\13\1\232\23\13\17\0\2\13\4\0\15\13\1\233"+
    "\13\13\17\0\2\13\4\0\23\13\1\234\5\13\17\0"+
    "\2\13\4\0\25\13\1\235\3\13\17\0\2\13\4\0"+
    "\5\13\1\236\23\13\17\0\2\13\4\0\11\13\1\237"+
    "\17\13\17\0\2\13\4\0\22\13\1\240\6\13\17\0"+
    "\2\13\4\0\11\13\1\241\17\13\1\0\4\40\1\242"+
    "\51\40\21\170\1\243\2\170\1\0\31\170\16\0\2\46"+
    "\4\0\1\117\1\244\27\46\17\0\2\13\4\0\3\13"+
    "\1\245\1\13\1\246\12\13\1\247\10\13\17\0\2\13"+
    "\4\0\5\13\1\250\23\13\17\0\2\13\4\0\1\13"+
    "\1\251\27\13\17\0\2\13\4\0\11\13\1\252\17\13"+
    "\17\0\2\13\4\0\20\13\1\253\10\13\17\0\2\13"+
    "\4\0\22\13\1\254\6\13\17\0\2\13\4\0\1\13"+
    "\1\255\27\13\17\0\2\13\4\0\4\13\1\256\24\13"+
    "\17\0\2\13\4\0\4\13\1\257\24\13\17\0\2\13"+
    "\4\0\5\13\1\260\23\13\17\0\2\13\4\0\1\13"+
    "\1\261\27\13\17\0\2\13\4\0\5\13\1\262\23\13"+
    "\17\0\2\13\4\0\3\13\1\263\25\13\17\0\2\13"+
    "\4\0\7\13\1\264\21\13\17\0\2\13\4\0\5\13"+
    "\1\265\23\13\17\0\2\13\4\0\5\13\1\266\23\13"+
    "\17\0\2\13\4\0\1\13\1\267\27\13\17\0\2\13"+
    "\4\0\3\13\1\270\25\13\17\0\2\13\4\0\15\13"+
    "\1\271\13\13\17\0\2\13\4\0\20\13\1\272\10\13"+
    "\17\0\2\13\4\0\21\13\1\273\7\13\17\0\2\13"+
    "\4\0\10\13\1\274\20\13\17\0\2\13\4\0\22\13"+
    "\1\275\6\13\17\0\2\13\4\0\1\13\1\276\27\13"+
    "\17\0\2\13\4\0\4\13\1\277\24\13\17\0\2\13"+
    "\4\0\5\13\1\300\23\13\17\0\2\13\4\0\21\13"+
    "\1\301\7\13\17\0\2\13\4\0\14\13\1\302\14\13"+
    "\17\0\2\13\4\0\21\13\1\303\7\13\17\0\2\13"+
    "\4\0\12\13\1\304\16\13\17\0\2\13\4\0\5\13"+
    "\1\305\23\13\17\0\2\13\4\0\2\13\1\306\26\13"+
    "\17\0\2\13\4\0\14\13\1\307\14\13\17\0\2\13"+
    "\4\0\13\13\1\310\15\13\17\0\2\13\4\0\20\13"+
    "\1\311\10\13\17\0\2\13\4\0\15\13\1\312\13\13"+
    "\22\0\1\313\60\0\1\45\13\0\1\170\33\0\2\46"+
    "\4\0\1\117\13\46\1\314\14\46\17\0\2\13\4\0"+
    "\23\13\1\315\5\13\17\0\2\13\4\0\13\13\1\316"+
    "\15\13\17\0\2\13\4\0\5\13\1\317\23\13\17\0"+
    "\2\13\4\0\14\13\1\320\14\13\17\0\2\13\4\0"+
    "\30\13\1\321\17\0\2\13\4\0\21\13\1\322\7\13"+
    "\17\0\2\13\4\0\1\13\1\323\27\13\17\0\2\13"+
    "\4\0\1\13\1\324\27\13\17\0\2\13\4\0\15\13"+
    "\1\325\13\13\17\0\2\13\4\0\5\13\1\326\23\13"+
    "\17\0\2\13\4\0\7\13\1\327\21\13\17\0\2\13"+
    "\4\0\12\13\1\330\16\13\17\0\2\13\4\0\10\13"+
    "\1\331\20\13\17\0\2\13\4\0\20\13\1\332\10\13"+
    "\17\0\2\13\4\0\7\13\1\333\21\13\17\0\2\13"+
    "\4\0\20\13\1\334\10\13\17\0\2\13\4\0\10\13"+
    "\1\335\20\13\17\0\2\13\4\0\20\13\1\336\10\13"+
    "\17\0\2\13\4\0\3\13\1\337\25\13\17\0\2\13"+
    "\4\0\15\13\1\340\13\13\17\0\2\13\4\0\11\13"+
    "\1\341\17\13\17\0\2\13\4\0\1\13\1\342\27\13"+
    "\17\0\2\13\4\0\2\13\1\343\26\13\17\0\2\13"+
    "\4\0\12\13\1\344\16\13\17\0\2\13\4\0\6\13"+
    "\1\345\22\13\17\0\2\13\4\0\1\13\1\346\27\13"+
    "\17\0\2\13\4\0\15\13\1\347\13\13\17\0\2\13"+
    "\4\0\15\13\1\350\13\13\17\0\2\13\4\0\5\13"+
    "\1\351\23\13\17\0\2\13\4\0\21\13\1\352\7\13"+
    "\22\0\1\353\52\0\2\46\4\0\1\117\14\46\1\354"+
    "\13\46\17\0\2\13\4\0\5\13\1\355\23\13\17\0"+
    "\2\13\4\0\16\13\1\356\12\13\17\0\2\13\4\0"+
    "\7\13\1\357\21\13\17\0\2\13\4\0\22\13\1\360"+
    "\6\13\17\0\2\13\4\0\1\13\1\361\27\13\17\0"+
    "\2\13\4\0\22\13\1\362\6\13\17\0\2\13\4\0"+
    "\3\13\1\363\1\13\1\364\12\13\1\365\10\13\17\0"+
    "\2\13\4\0\1\13\1\366\27\13\17\0\2\13\4\0"+
    "\24\13\1\367\4\13\17\0\2\13\4\0\1\13\1\370"+
    "\27\13\17\0\2\13\4\0\5\13\1\371\23\13\17\0"+
    "\2\13\4\0\1\13\1\372\27\13\17\0\2\13\4\0"+
    "\11\13\1\373\17\13\17\0\2\13\4\0\1\13\1\374"+
    "\27\13\17\0\2\13\4\0\20\13\1\375\10\13\17\0"+
    "\2\13\4\0\26\13\1\376\2\13\17\0\2\13\4\0"+
    "\4\13\1\377\24\13\17\0\2\13\4\0\23\13\1\u0100"+
    "\5\13\17\0\2\13\4\0\1\13\1\u0101\27\13\17\0"+
    "\2\13\4\0\15\13\1\u0102\13\13\17\0\2\13\4\0"+
    "\12\13\1\u0103\16\13\17\0\2\13\4\0\5\13\1\u0104"+
    "\23\13\23\0\1\u0105\51\0\2\46\4\0\1\u0106\30\46"+
    "\17\0\2\13\4\0\14\13\1\u0107\14\13\17\0\2\13"+
    "\4\0\1\13\1\u0108\27\13\17\0\2\13\4\0\1\13"+
    "\1\u0109\27\13\17\0\2\13\4\0\15\13\1\u010a\13\13"+
    "\17\0\2\13\4\0\20\13\1\u010b\10\13\17\0\2\13"+
    "\4\0\1\13\1\u010c\27\13\17\0\2\13\4\0\23\13"+
    "\1\u010d\5\13\17\0\2\13\4\0\13\13\1\u010e\15\13"+
    "\17\0\2\13\4\0\5\13\1\u010f\23\13\17\0\2\13"+
    "\4\0\5\13\1\u0110\23\13\17\0\2\13\4\0\5\13"+
    "\1\u0111\23\13\17\0\2\13\4\0\12\13\1\u0112\16\13"+
    "\17\0\2\13\4\0\1\13\1\u0113\27\13\17\0\2\13"+
    "\4\0\13\13\1\u0114\15\13\17\0\2\13\4\0\5\13"+
    "\1\u0115\23\13\17\0\2\13\4\0\5\13\1\u0116\23\13"+
    "\17\0\2\13\4\0\12\13\1\u0117\16\13\56\0\1\u0118"+
    "\16\0\2\13\4\0\22\13\1\u0119\6\13\17\0\2\13"+
    "\4\0\17\13\1\u011a\11\13\17\0\2\13\4\0\12\13"+
    "\1\u011b\16\13\17\0\2\13\4\0\5\13\1\u011c\23\13"+
    "\17\0\2\13\4\0\16\13\1\u011d\12\13\17\0\2\13"+
    "\4\0\7\13\1\u011e\21\13\17\0\2\13\4\0\14\13"+
    "\1\u011f\14\13\17\0\2\13\4\0\15\13\1\u0120\13\13"+
    "\17\0\2\13\4\0\2\13\1\u0121\26\13\17\0\2\13"+
    "\4\0\14\13\1\u0122\14\13\22\0\1\u0123\52\0\2\13"+
    "\4\0\15\13\1\u0124\13\13\17\0\2\13\4\0\23\13"+
    "\1\u0125\5\13\17\0\2\13\4\0\15\13\1\u0126\13\13"+
    "\17\0\2\13\4\0\14\13\1\u0127\14\13\17\0\2\13"+
    "\4\0\1\13\1\u0128\27\13\17\0\2\13\4\0\1\13"+
    "\1\u0129\27\13\17\0\2\13\4\0\11\13\1\u012a\17\13"+
    "\17\0\2\13\4\0\1\13\1\u012b\27\13\22\0\1\u012c"+
    "\52\0\2\13\4\0\5\13\1\u012d\23\13\17\0\2\13"+
    "\4\0\22\13\1\u012e\6\13\17\0\2\13\4\0\17\13"+
    "\1\u012f\11\13\17\0\2\13\4\0\12\13\1\u0130\16\13"+
    "\17\0\2\13\4\0\15\13\1\u0131\13\13\15\0\1\u0132"+
    "\57\0\2\13\4\0\15\13\1\u0133\13\13\17\0\2\13"+
    "\4\0\23\13\1\u0134\5\13\17\0\2\13\4\0\15\13"+
    "\1\u0135\13\13\12\0\1\u0136\62\0\2\13\4\0\5\13"+
    "\1\u0137\23\13\13\0\1\u0138\47\0\1\41\51\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12006];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\1\11\26\1\1\0"+
    "\1\11\6\0\42\1\1\0\1\11\1\1\2\0\1\11"+
    "\1\0\46\1\2\0\1\11\1\0\50\1\2\0\46\1"+
    "\2\0\36\1\2\0\30\1\1\0\1\11\21\1\1\0"+
    "\12\1\1\0\10\1\1\0\5\1\1\0\3\1\1\0"+
    "\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

private boolean imprimirErrores = true;

public void desactivarImpresionErrores() {
    imprimirErrores = false;
}

public void activarImpresionErrores() {
    imprimirErrores = true;
}

public int getLine() {
    return yyline;
}

public int getColumn() {
    return yycolumn;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { if (imprimirErrores) {
        System.err.println("Error léxico: " + yytext() + " en línea " + (yyline + 1) + ", columna " + (yycolumn + 1));
    }
            }
          // fall through
          case 58: break;
          case 2:
            { /* Ignorar */
            }
          // fall through
          case 59: break;
          case 3:
            { /* Saltar a la siguiente línea */
            }
          // fall through
          case 60: break;
          case 4:
            { /* Comentario de una línea: ignorar */
            }
          // fall through
          case 61: break;
          case 5:
            { /* Ignorar si no están dentro de una cadena */
            }
          // fall through
          case 62: break;
          case 6:
            { return new Symbol(sym.COMMA, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 63: break;
          case 7:
            { return new Symbol(sym.INT_LITERAL, yyline + 1, yycolumn + 1, Integer.parseInt(yytext()));
            }
          // fall through
          case 64: break;
          case 8:
            { if (imprimirErrores) {
        System.err.println("Error léxico: \"" + yytext() + "\" en línea " + (yyline + 1) + ", columna " + (yycolumn + 1));
    }
            }
          // fall through
          case 65: break;
          case 9:
            { return new Symbol(sym.STRING_LITERAL, yyline + 1, yycolumn + 1, yytext().substring(1, yytext().length() - 1));
            }
          // fall through
          case 66: break;
          case 10:
            { return new Symbol(sym.CHAR_LITERAL, yyline + 1, yycolumn + 1, yytext().charAt(1));
            }
          // fall through
          case 67: break;
          case 11:
            { return new Symbol(sym.FLOAT_LITERAL, yyline + 1, yycolumn + 1, Float.parseFloat(yytext()));
            }
          // fall through
          case 68: break;
          case 12:
            { return new Symbol(sym.IDENTIFIER, yyline + 1, yycolumn + 1, yytext());
            }
          // fall through
          case 69: break;
          case 13:
            { /* Ignorar comentario multilínea */
            }
          // fall through
          case 70: break;
          case 14:
            { return new Symbol(sym.IF, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 71: break;
          case 15:
            { return new Symbol(sym.ELSE, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 72: break;
          case 16:
            { return new Symbol(sym.EQUAL, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 73: break;
          case 17:
            { return new Symbol(sym.BOOL_LITERAL, yyline + 1, yycolumn + 1, Boolean.parseBoolean(yytext()));
            }
          // fall through
          case 74: break;
          case 18:
            { return new Symbol(sym.BREAK, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 75: break;
          case 19:
            { return new Symbol(sym.RETURN, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 76: break;
          case 20:
            { return new Symbol(sym.MODULO, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 77: break;
          case 21:
            { return new Symbol(sym.PRINT, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 78: break;
          case 22:
            { return new Symbol(sym.INCREMENT, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 79: break;
          case 23:
            { return new Symbol(sym.DIVIDE, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 80: break;
          case 24:
            { return new Symbol(sym.COLON, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 81: break;
          case 25:
            { return new Symbol(sym.STRING, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 82: break;
          case 26:
            { return new Symbol(sym.CHAR, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 83: break;
          case 27:
            { return new Symbol(sym.FOR, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 84: break;
          case 28:
            { return new Symbol(sym.OR, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 85: break;
          case 29:
            { return new Symbol(sym.DECREMENT, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 86: break;
          case 30:
            { return new Symbol(sym.BOOL, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 87: break;
          case 31:
            { return new Symbol(sym.DEFAULT, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 88: break;
          case 32:
            { return new Symbol(sym.SWITCH, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 89: break;
          case 33:
            { return new Symbol(sym.ASSIGN, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 90: break;
          case 34:
            { return new Symbol(sym.READ, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 91: break;
          case 35:
            { return new Symbol(sym.AND, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 92: break;
          case 36:
            { return new Symbol(sym.GREATER_THAN, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 93: break;
          case 37:
            { return new Symbol(sym.PLUS, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 94: break;
          case 38:
            { return new Symbol(sym.INTEGER, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 95: break;
          case 39:
            { return new Symbol(sym.GREATER_EQUAL, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 96: break;
          case 40:
            { return new Symbol(sym.MAIN, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 97: break;
          case 41:
            { return new Symbol(sym.POWER, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 98: break;
          case 42:
            { return new Symbol(sym.NOT, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 99: break;
          case 43:
            { return new Symbol(sym.FLOAT, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 100: break;
          case 44:
            { return new Symbol(sym.WHILE, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 101: break;
          case 45:
            { return new Symbol(sym.CASE, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 102: break;
          case 46:
            { return new Symbol(sym.NOT_EQUAL, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 103: break;
          case 47:
            { return new Symbol(sym.LESS_THAN, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 104: break;
          case 48:
            { return new Symbol(sym.LESS_EQUAL, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 105: break;
          case 49:
            { return new Symbol(sym.END_STATEMENT, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 106: break;
          case 50:
            { return new Symbol(sym.OPEN_BLOCK, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 107: break;
          case 51:
            { return new Symbol(sym.OPEN_PAREN, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 108: break;
          case 52:
            { return new Symbol(sym.MULTIPLY, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 109: break;
          case 53:
            { return new Symbol(sym.OPEN_BRACKET, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 110: break;
          case 54:
            { return new Symbol(sym.MINUS, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 111: break;
          case 55:
            { return new Symbol(sym.CLOSE_BLOCK, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 112: break;
          case 56:
            { return new Symbol(sym.CLOSE_PAREN, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 113: break;
          case 57:
            { return new Symbol(sym.CLOSE_BRACKET, yyline + 1, yycolumn + 1);
            }
          // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
